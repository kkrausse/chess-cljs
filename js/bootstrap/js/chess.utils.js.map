{"version":3,"sources":["chess/utils.cljs"],"mappings":";AAGA,AAAA,AAAMA,AAAQC,AAAEC;AAAhB,AACE,AAAI,AAAK,AAAA,AAAMD;AAAI,AAACC,AAAAA,AAAAA,AAAED,AAAAA;;AAAtB;;;AAEF,AAAA,AAAA,AAAAE,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AAAOI;AAAb,AACE,AAACC,AAAMC,AAAI,AAACC,AAAKC,AAAOJ;;;AAD1B,AAAA,AAAA,AAAMJ;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAF;;;AAAA,AAGA,AAAA,AAAA,AAAAP,AAAMe;AAAN,AAAA,AAAAd,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAc,AAAAX;;;AAAA,AAAA,AAAA,AAAA,AAAMW,AAAgBE;AAAtB,AACE,AAAc,AAAA,AAAM,AAAA,AAAuBC,AAC7B,AAAMC,AAAG,AAAA,AAAgBD;AAAzB,AACE,AAAA,AAAMC,AAAeF;;AACrBE;;;AAChB,AAACC,AAAKH;;;AALR,AAAA,AAAA,AAAMF;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAP,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAO;;;AAAA,AAOA,AAAA,AAAMK,AAAMtB,AAAEuB;AAAd,AACE,AAAAC,AAA0BD;AAA1BE,AAAAD;AAAAE,AAAA,AAAAhB,AAAAe;AAAAE,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAC,AAAQM;AAARP,AAAeQ;AACRC,AAAQ,AAACnC,AAAAA,AAAAA,AAAEiC,AAAAA;AACXG,AAAUH;AAFjB,AAAA,AAAAT,AAAAA;AACOW,AAAAA;AACAC,AAAAA;;AAFP,AAAA,AAAAN,AAAAN;AAAAO,AAAA,AAAArB,AAAAoB;AAAAE,AAAA,AAAAJ,AAAAG;AAAAA,AAAA,AAAAF,AAAAE;AAAAC,AAAQC;AAARF,AAAeG;AACRC,AAAAA;AACAC,AAAAA;AAFP,AAGE,AAAMG,AAAQ,AAACvC,AAAAA,AAAAA,AAAEiC,AAAAA;AAAjBI,AACkB,AAAA,AAAA,AAAA,AAAA,AACE,AAAGE,AAAQJ,AAAUI,AAAQN,AAC7B,AAACS,AAAEH,AAAQJ,AAAS,AAAA,AAAA,AAAI,AAAA,AAAG,AAACQ,AACLR,AAAQC,AACRG,AAAQN,AACxBE,AAAQC;;AANnC,AAAAE,AAAAD,AAAA,AAAA,AACOG;AADP,AAAAF,AAAAD,AAAA,AAAA,AACYI;AADZ,AAOE,AAAI,AAACG,AAAOV;AACVO;;AACA,AAAOP;AACAM;AACAC","names":["chess.utils/nilmap","x","f","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","chess.utils/zip","seq10039","self__4724__auto__","cljs.core/seq","seqs","cljs.core.apply","cljs.core/map","cljs.core/cons","cljs.core/vector","chess.utils/screen-print","seq10040","stuff","js/document","el","cljs.core/last","chess.utils/maxf","xs","G__10044","vec__10045","seq__10046","first__10047","cljs.core/first","cljs.core/next","vec__10054","seq__10055","first__10056","head","remaining","cur-max","cur-max-x","vec__10057","cljs.core.nth","cur-val","maxv","maxx","cljs.core._EQ_","cljs.core.rand","cljs.core/empty?"],"sourcesContent":["(ns chess.utils\n  (:require-macros [chess.utils :refer [match plusminus literalize]]))\n\n(defn nilmap [x f]\n  (if (not (nil? x)) (f x)))\n\n(defn zip [& seqs]\n  (apply map (cons vector seqs)))\n\n(defn screen-print [& stuff]\n  (.appendChild (aget (.getElementsByTagName js/document \"BODY\") 0)\n                (let [el (.createElement js/document \"p\")]\n                  (aset el \"innerHTML\" stuff)\n                  el))\n  (last stuff))\n\n(defn maxf [f xs]\n  (loop [[head & remaining] xs\n         cur-max (f head)\n         cur-max-x head]\n    (let [cur-val (f head)\n          [maxv maxx] (cond\n                        (> cur-val cur-max) [cur-val head]\n                        (= cur-val cur-max) (if (> (rand) 0.5)\n                                              [cur-max cur-max-x]\n                                              [cur-val head])\n                        :else [cur-max cur-max-x])]\n      (if (empty? remaining)\n        maxx\n        (recur remaining\n               maxv\n               maxx)))))\n"]}