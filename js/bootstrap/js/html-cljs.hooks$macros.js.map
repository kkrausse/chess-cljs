{"version":3,"sources":["html_cljs/hooks$macros.cljc"],"mappings":"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","names":["ret__4785__auto__","&form","&env","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","html-cljs.hooks$macros/hook-meta","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","html-cljs.hooks$macros/with-hooks","seq10098","G__10099","cljs.core/first","cljs.core/next","G__10100","G__10101","G__10102","self__4723__auto__","funcname","props","body","cljs.core.println","hooks","cljs.core.atom","clojure.walk/prewalk","form","cljs.core/seq?","vec__10103","seq__10104","first__10105","head","tail","thing","cljs.core/Symbol","html-cljs.hooks$macros/ns-resolve","cljs.core/*ns*","cljs.core/meta","cljs.core/contains?","p1__10097#","cljs.core.swap_BANG_","cljs.core.conj","html-cljs$hooks$macros$HookFunc$bind_lifecycle$dyn","x__4428__auto__","m__4429__auto__","html-cljs.hooks$macros/bind-lifecycle","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","html-cljs.hooks$macros/HookFunc","_","cmp","this__4380__auto__","k__4381__auto__","this__4382__auto__","k10107","else__4383__auto__","G__10111","cljs.core/Keyword","f","cljs.core.get","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","cljs.core.reduce","ret__4402__auto__","p__10112","vec__10113","k__4403__auto__","cljs.core.nth","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core/PersistentVector","G__10106","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","cljs.core/count","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this10108","other10109","cljs.core._EQ_","cljs.core/PROTOCOL_SENTINEL","this__4389__auto__","k__4390__auto__","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__10133","cljs.core/keyword-identical?","expr__10134","cljs.core.assoc","this__4392__auto__","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","html-cljs.hooks$macros/Hook","this__4423__auto__","writer__4424__auto__","cljs.core/-write","G__10110","extmap__4419__auto__","G__10155","cljs.core/record?","html-cljs.hooks$macros/->Hook","html-cljs.hooks$macros/map->Hook","html-cljs.hooks$macros/mkhook","seq10165","G__10166","G__10167","G__10168","G__10169","cljs.core/vec","hooklhs","cljs.core.take_nth","hookrhs","cljs.core/rest","hooked-syms","cljs.core.map","hookname","cljs.core.gensym","clc-sym","cljs.core.mapcat","cljs.core/vector","hook","p__10179","vec__10180","hooked","rhs"],"sourcesContent":["(ns html-cljs.hooks\n  (:require [clojure.walk :as walk]))\n\n(defmacro hook-meta\n  \"would use this for the below macro to find the hooks invoked in the body\"\n  [] `(symbol \"html-cljs.html/hook\"))\n\n(defmacro with-hooks\n  \"attempt to have macro search for hook invocations in the body rather than\n  have the hooks be explicitly passed. For now, a failed attempt since I am\n  unable to resolve symbols at compile time and get the metadata on them.\"\n  [funcname props & body]\n  (println (hook-meta))\n  (let [hooks (atom [])]\n    (walk/prewalk\n      (fn [form]\n        (if (seq? form)\n          (let [[head & tail] form\n                thing (if (symbol? head)\n                        (ns-resolve *ns* &env head)\n                        head)]\n            (println \"checking\" head )\n            (println *ns*)\n            (println \"symbol? \" (symbol? head))\n            (if (symbol? head)\n            (println \"ns-resolved: \" (ns-resolve *ns* &env head)))\n            (println \"meta thing\" (meta thing))\n            #_(if (symbol? head)\n            (println \"eval head\" (eval head)))\n            (if (and (some? head)\n                     (contains? (meta thing) (hook-meta)))\n              (swap! hooks #(conj % form)))))\n        form)\n      body)\n    `(defn ~funcname ~props\n       ~@body)))\n\n; TODO: work with Hooks and Components as records with methods instead of just\n; higher order functions\n\n(defprotocol HookFunc\n  (bind-lifecycle [_ cmp] \"partially apply the hook. Returns an applied-hook\"))\n\n(defrecord Hook [f]\n  HookFunc\n  (bind-lifecycle [_ cmp] (f cmp)))\n\n;(defprotocol BoundHook [f ])\n\n;(def x (Hook. (fn [thing] (print \"funy-\" thing))))\n\n;(instance? Hook (Hook. (fn [thing] (print \"funy-\" thing))))\n\n#_(satisfies? HookFunc (Hook. (fn [thing] (print \"funy-\" thing))))\n\n#_(defn hstuff [h]\n  (bind-lifecycle h \"thing hstuff\"))\n\n\n(defmacro mkhook [props hooks & body]\n  (let [hooklhs (take-nth 2 hooks)\n        hookrhs (take-nth 2 (rest hooks))\n        hooked-syms (map (fn [hookname]\n                           (gensym (str \"hooked-\" hookname)))\n                         (map first hookrhs))\n        clc-sym `clc#]\n    `(fn [~clc-sym]\n       (let [~@(mapcat vector\n                       hooked-syms\n                       (map (fn [hook] `(~hook ~clc-sym))\n                            (map first hookrhs)))]\n         (fn ~props\n           (let [~@(mapcat vector\n                        hooklhs\n                        (map (fn [[hooked rhs]] `(~hooked ~@(rest rhs)))\n                             (map vector hooked-syms hookrhs)))]\n             ~@body))))))\n"]}