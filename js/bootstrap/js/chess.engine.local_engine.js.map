{"version":3,"sources":["chess/engine/local_engine.cljs"],"mappings":"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","names":["chess.engine.local-engine/piece-seq","board","cljs.core.mapcat","cljs.core/identity","iter__4529__auto__","s__10141","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__10143","cljs.core/chunk-buffer","i__10142","vec__10145","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__10140","cljs.core/chunk-rest","vec__10170","cljs.core/first","cljs.core/cons","cljs.core/rest","row","i","chess.utils.zip","cljs.core.range","s__10149","b__10151","i__10150","vec__10158","iter__10148","vec__10164","s__10174","b__10176","i__10175","vec__10177","iter__10173","vec__10180","sq","j","chess.engine.local-engine/find-piece","props","cljs.core.filter","p__10191","vec__10194","p1__10185#","p2__10186#","cljs.core.reduce","and__4115__auto__","s__10203","b__10205","i__10204","vec__10208","iter__10202","vec__10211","k","v","cljs.core._EQ_","cljs.core.map","p__10187","vec__10188","chess.engine.local-engine/piece-at","chess.engine.local-engine/color-dir","matchie10214","chess.engine.local-engine/getall","color","chess.engine.local-engine/on-line","di","dj","sofar","ci","cj","fexpr__10228","fexpr__10229","chess.engine.local-engine/can-place","fexpr__10235","chess.engine.local-engine/castle-moves","vec__10236","vec__10239","ki","kj","rooks","or__4126__auto__","p__10246","vec__10247","ri","rj","p1__10217#","p2__10218#","s__10252","b__10254","i__10253","vec__10262","iter__10251","vec__10265","chess.engine.local-engine/piece-moves","matchie10274","cljs.core.concat","s__10276","xs__6292__auto__","iterys__4525__auto__","s__10278","b__10280","i__10279","iter__10277","fs__4526__auto__","iter__10275","s__10282","s__10284","b__10286","i__10285","iter__10283","iter__10281","cljs.core.apply","cljs.core/concat","s__10292","s__10294","b__10296","i__10295","iter__10293","iter__10291","s__10298","s__10300","b__10302","i__10301","iter__10299","iter__10297","s__10304","s__10306","b__10308","i__10307","iter__10305","iter__10303","p__10309","vec__10310","fexpr__10313","p__10314","vec__10315","fexpr__10319","chess.engine.core/other-color","cljs.core/List","p__10269","vec__10270","p","p__10320","vec__10321","p1__10225#","p__10324","vec__10325","chess.engine.local-engine/local-apply-move","from1","to1","from2","to2","s__10329","b__10331","i__10330","vec__10332","iter__10328","vec__10345","s__10336","b__10338","i__10337","vec__10339","iter__10335","vec__10342","s__10349","b__10351","i__10350","vec__10352","iter__10348","vec__10355","cljs.core.assoc","chess.engine.local-engine/piece-value","matchie10358","chess.engine.local-engine/board-value","p__10363","vec__10364","p__10359","vec__10360","cljs.core/+","chess.engine.local-engine/move-value","move","depth","applied-board","cljs.core/second","G__10367","G__10368","G__10369","chess.engine.local-engine/local-best-move","cljs.core.prn","chess.utils/maxf","chess.engine.local-engine/local-engine","js/chess","js/chess.engine","js/chess.engine.local-engine","js/chess.engine.local-engine.t_chess$engine$local_engine10371","chess.engine.local-engine/t_chess$engine$local_engine10371","_10373","meta10372","cljs.core/PROTOCOL_SENTINEL","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","chess.engine.local-engine/->t_chess$engine$local_engine10371","this","vec__10374","new-board","king","cljs.core/not","p1__10370#","cljs.core/some","_","vec__10377","value","cljs.core/chunk-first"],"sourcesContent":["(ns chess.engine.local-engine\n  (:require [html-cljs.hooks :as hooks]\n            [html-cljs.html :as html]\n            [chess.engine.core :refer [Engine\n                                       other-color\n                                       apply-move\n                                       possible-moves\n                                       best-move]]\n            [chess.utils :refer [zip match plusminus maxf]]))\n\n\n(defn piece-seq [board]\n  (mapcat identity\n          (for [[row i] (zip board (range 8))]\n            (for [[sq j] (zip row (range 8))]\n              [i j sq]))))\n\n(defn find-piece [board props]\n  (->> (piece-seq board)\n       (filter (fn [[i j sq]]\n                 (reduce #(and %1 %2)\n                        (for [[k v] props]\n                          (= v (sq k))))))\n       (map (fn [[i j sq]] [i j]))))\n\n(defn piece-at [board i j]\n  \"basic index of the board as described above\"\n  (nth (nth board i) j))\n\n(defn color-dir [sq]\n  (match (sq :color)\n         :white -1\n         :black 1))\n\n(defn getall [board color]\n  \"gets all legal moves even if it endangers the king\"\n\n  (defn on-line [board i j di dj color]\n    (loop [sofar []\n           ci (+ i di)\n           cj (+ j dj)]\n      (cond\n        ;off board\n        (or (>= ci 8) (>= cj 8) (< ci 0) (< cj 0)) sofar\n        ;my piece\n        (= ((piece-at board ci cj) :color) color) sofar\n        ;the other color\n        (not (nil? ((piece-at board ci cj) :piece))) (cons [ci cj] sofar)\n        ;empty space\n        :else (recur (cons [ci cj] sofar) (+ ci di) (+ cj dj)))))\n\n  (defn can-place [board i j color]\n    (and\n      (not (or (>= i 8) (>= j 8) (< i 0) (< j 0)))\n      (not (= ((piece-at board i j) :color) color))))\n\n  (defn castle-moves [board color]\n    (let [[[ki kj]] (find-piece board {:piece :king :color color})\n          rooks (find-piece board {:piece :rook :color color})]\n      (if (or (nil? ki) (:moved (piece-at board ki kj)))\n        []\n        (mapcat (fn [[ri rj]]\n                  (if (:moved (piece-at board ri rj))\n                    []\n                    (if (reduce #(and %1 %2)\n                                (for [[i j] (zip [ki ki ki ki ki]\n                                                 (if (< rj kj)\n                                                   (range (inc rj) kj)\n                                                   (range (inc kj) rj)))]\n                                  (and (can-place board i j :white) (can-place board i j :black))))\n                      (if (< rj kj)\n                        [[[ki kj] [ki (- kj 2)] [ri rj] [ri (dec kj)]]]\n                        [[[ki kj] [ki (+ kj 2)] [ri rj] [ri (inc kj)]]])\n                      [])))\n                rooks))))\n\n  (defn piece-moves [board i j sq]\n    (->> (match (sq :piece)\n           :rook (concat\n                   (on-line board i j 1 0 (sq :color))\n                   (on-line board i j -1 0 (sq :color))\n                   (on-line board i j 0 1 (sq :color))\n                   (on-line board i j 0 -1 (sq :color)))\n\n           :knight (concat\n                     (plusminus [di 1 dj 2]\n                                [(+ i di) (+ j dj)])\n                     (plusminus [di 2 dj 1]\n                                [(+ i di) (+ j dj)]))\n\n           :bishop (apply concat\n                          (plusminus [di 1 dj 1]\n                                     (on-line board i j di dj (sq :color))))\n\n           :king (for [di [-1 0 1] dj [-1 0 1]]\n                   [(+ i di) (+ j dj)])\n\n           :queen (apply concat\n                         (for [di [-1 0 1] dj [-1 0 1]]\n                         (on-line board i j di dj (sq :color))))\n\n           :pawn (concat\n                   (filter (fn [[i j]] (nil? ((piece-at board i j) :piece)))\n                           (cons [(+ i (color-dir sq)) j]\n                                 (if (sq :moved)\n                                   []\n                                   [[(+ i (* 2 (color-dir sq))) j]])))\n                   (filter (fn [[i j]]\n                             (and (can-place board i j (sq :color))\n                                  (= ((piece-at board i j) :color) (other-color (sq :color)))))\n                           (list [(+ i (color-dir sq)) (dec j)] [(+ i (color-dir sq)) (inc j)]))))\n\n         (filter (fn [[i j]] (can-place board i j (sq :color))))\n         (map (fn [p] [[i j] p]))))\n\n  (->> (piece-seq board)\n       (filter (fn [[i j sq]]\n                 (= color (sq :color))))\n       (map #(apply piece-moves (cons board %)))\n       (cons (castle-moves board color))\n       (mapcat identity)))\n\n(defn local-apply-move [board [from1 to1 from2 to2]]\n  (for [[row i] (zip board (range 8))]\n        (for [[sq j] (zip row (range 8))]\n          (cond\n            (or (= from1 [i j]) (= from2 [i j])) {}\n            (= to1 [i j]) (assoc (apply piece-at (cons board from1)) :moved true)\n            (= to2 [i j]) (assoc (apply piece-at (cons board from2)) :moved true)\n            :else sq))))\n\n(defn piece-value [p]\n  (match p\n         :rook 6\n         :knight 3\n         :bishop 4\n         :king 10000\n         :queen 9\n         :pawn 1))\n\n(defn board-value [board color]\n  (->> (piece-seq board)\n       (filter (fn [[i j sq]] (not (nil? (sq :piece)))))\n       (map (fn [[i j sq]]\n              (* (if (= color (sq :color)) 1 -1)\n                 (piece-value (sq :piece)))))\n       (reduce +)))\n\n(declare local-best-move\n         local-engine)\n\n\n(defn move-value [board move depth]\n  ;(prn \"calcing move: \" move)\n  (let [color (:color (apply piece-at (cons board (first move))))\n        applied-board (local-apply-move board move)]\n    (if (> depth 0)\n      (* -1 (second (local-best-move applied-board (other-color color) (dec depth))))\n      (do\n        (board-value applied-board color)))))\n\n(defn local-best-move [board color depth]\n  \"returns the best move and it's value [move value]\"\n  (->> (getall board color)\n       (map (fn [move] [move (move-value board move depth)]))\n       (map (fn [v]\n              (if (= depth 2) (do (prn v) v) v)))\n       (maxf second)))\n\n(def local-engine\n\n  (reify Engine\n\n    (apply-move [this board move] (local-apply-move board move))\n\n    (possible-moves [this board color]\n      (->> (getall board color)\n           ;filter out those moves where the king is in danger!\n           ;(map #(do (prn \"move: \" %) %))\n           (filter (fn [move]\n                     (let [new-board (apply-move this board move)\n                           [king] (find-piece new-board {:piece :king :color color})]\n                       (not (some #(= king %) (mapcat identity (getall new-board (other-color color))))))))))\n\n    (best-move [_ board color] (let [[move value] (local-best-move board color 2)]\n                                 (prn \"value: \" value)\n                                 move))))\n\n"]}