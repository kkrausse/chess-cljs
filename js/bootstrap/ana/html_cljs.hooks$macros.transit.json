["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","html_cljs/hooks$macros.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",20],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader"],"~:shadow/protocol-prefixes",["~#set",["html-cljs$hooks$macros$HookFunc$"]],"~:use-macros",null,"~:excludes",["^<",[]],"~:name","~$html-cljs.hooks$macros","~:imports",null,"~:requires",["^ ","~$clojure.walk","^C","~$walk","^C","~$cljs.core","^E","~$goog","^F"],"~:seen",["^<",["~:require"]],"~:uses",null,"~:defs",["^ ","~$hook-meta",["^ ","~:protocol-inline",null,"^2",["^ ","^3","html_cljs/hooks$macros.cljc","^4",4,"^5",11,"^6",4,"^7",20,"~:macro",true,"~:arglists",["~#list",["~$quote",["^O",[[]]]]],"~:doc","would use this for the below macro to find the hooks invoked in the body"],"^?","~$html-cljs.hooks$macros/hook-meta","^3","html_cljs/hooks$macros.cljc","^7",20,"~:method-params",["^O",[["~$&form","~$&env"]]],"~:protocol-impl",null,"~:arglists-meta",["^O",[null,null]],"^5",1,"~:variadic?",false,"^4",4,"^M",true,"~:ret-tag",["^<",["~$seq","~$cljs.core/IList"]],"^6",4,"~:max-fixed-arity",2,"~:fn-var",false,"^N",["^O",["^P",["^O",[[]]]]],"^Q","would use this for the below macro to find the hooks invoked in the body"],"~$with-hooks",["^ ","^L",null,"^2",["^ ","^3","html_cljs/hooks$macros.cljc","^7",21,"~:top-fn",["^ ","^X",true,"~:fixed-arity",2,"^10",2,"^S",["^O",[["^O",["~$funcname","~$props","~$body"]]]],"^N",["^O",[["^15","^16","~$&","^17"]]],"^W",["^O",[null]]],"^5",11,"^4",8,"^M",true,"^6",8,"^N",["^O",["^P",["^O",[["^15","^16","~$&","^17"]]]]],"^Q","attempt to have macro search for hook invocations in the body rather than\n  have the hooks be explicitly passed. For now, a failed attempt since I am\n  unable to resolve symbols at compile time and get the metadata on them."],"^?","~$html-cljs.hooks$macros/with-hooks","^3","html_cljs/hooks$macros.cljc","^7",21,"^13",["^ ","^X",true,"^14",2,"^10",2,"^S",["^O",[["^O",["^15","^16","^17"]]]],"^N",["^O",[["^15","^16","~$&","^17"]]],"^W",["^O",[null]]],"^S",["^O",[["^O",["^15","^16","^17"]]]],"^V",null,"^14",2,"^W",["^O",[null]],"^5",1,"^X",true,"~:methods",[["^ ","^14",2,"^X",true,"~:tag",["^<",["^Z","^["]]]],"^4",8,"^M",true,"^Y","~$any","^6",8,"^10",2,"^11",false,"^N",["^O",[["^15","^16","~$&","^17"]]],"^Q","attempt to have macro search for hook invocations in the body rather than\n  have the hooks be explicitly passed. For now, a failed attempt since I am\n  unable to resolve symbols at compile time and get the metadata on them."],"~$HookFunc",["^ ","^2",["^ ","~:protocol-symbol",true,"^3","html_cljs/hooks$macros.cljc","^7",22,"^5",14,"^4",41,"~:protocol-info",["^ ","^19",["^ ","~$bind-lifecycle",[["~$_","~$cmp"]]]],"^6",41,"~:sigs",["^ ","~:bind-lifecycle",["^ ","^?","^1?","^N",["^O",[["~$_","^1@"]]],"^Q","partially apply the hook. Returns an applied-hook"]],"~:jsdoc",["^O",["@interface"]]],"^1=",true,"^?","~$html-cljs.hooks$macros/HookFunc","^3","html_cljs/hooks$macros.cljc","^7",22,"^5",1,"^4",41,"^1>",["^ ","^19",["^ ","^1?",[["~$_","^1@"]]]],"~:info",null,"^6",41,"^1:","^1;","^1A",["^ ","^1B",["^ ","^?","^1?","^N",["^O",[["~$_","^1@"]]],"^Q","partially apply the hook. Returns an applied-hook"]],"~:impls",["^<",["~$html-cljs.hooks$macros/Hook"]],"^1C",["^O",["@interface"]]],"^1?",["^ ","^L",null,"^2",["^ ","^3","html_cljs/hooks$macros.cljc","^4",42,"^5",4,"^6",42,"^7",18,"~:protocol","^1D","^Q","partially apply the hook. Returns an applied-hook","^N",["^O",["^P",["^O",[["~$_","^1@"]]]]]],"^1H","^1D","^?","~$html-cljs.hooks$macros/bind-lifecycle","^3","html_cljs/hooks$macros.cljc","^7",18,"^S",["^O",[["~$_","^1@"]]],"^V",null,"^W",["^O",[null,null]],"^5",1,"^X",false,"^4",41,"^Y","^1;","^6",42,"^10",2,"^11",true,"^N",["^O",["^P",["^O",[["~$_","^1@"]]]]],"^Q","partially apply the hook. Returns an applied-hook"],"~$Hook",["^ ","~:num-fields",1,"~:protocols",["^<",["~$cljs.core/IRecord","^1D","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^?","^1G","^3","html_cljs/hooks$macros.cljc","^7",16,"~:type",true,"^5",12,"~:internal-ctor",true,"^4",44,"~:record",true,"^6",44,"^1:","~$function","~:skip-protocol-flag",["^<",["^1M","^1N","^1O","^1P","^1Q","^1R","^1S","^1T","^1U","^1V","^1W","^1X","^1Y","^1Z","^1["]]],"~$->Hook",["^ ","^L",null,"^2",["^ ","^3","html_cljs/hooks$macros.cljc","^7",16,"^5",12,"^21",true,"~:factory","~:positional","^4",44,"^6",44,"^N",["^O",["^P",["^O",[["~$f"]]]]],"^Q","Positional factory function for html-cljs.hooks$macros/Hook."],"^?","~$html-cljs.hooks$macros/->Hook","^3","html_cljs/hooks$macros.cljc","^7",16,"^S",["^O",[["~$f"]]],"^V",null,"^W",["^O",[null,null]],"^5",1,"^21",true,"^X",false,"^26","^27","^4",44,"^Y","^1G","^6",44,"^10",1,"^11",true,"^N",["^O",["^P",["^O",[["~$f"]]]]],"^Q","Positional factory function for html-cljs.hooks$macros/Hook."],"~$map->Hook",["^ ","^L",null,"^2",["^ ","^3","html_cljs/hooks$macros.cljc","^7",16,"^5",12,"^21",true,"^26","~:map","^4",44,"^6",44,"^N",["^O",["^P",["^O",[["~$G__10110"]]]]],"^Q","Factory function for html-cljs.hooks$macros/Hook, taking a map of keywords to field values."],"^?","~$html-cljs.hooks$macros/map->Hook","^3","html_cljs/hooks$macros.cljc","^7",16,"^S",["^O",[["^2;"]]],"^V",null,"^W",["^O",[null,null]],"^5",1,"^21",true,"^X",false,"^26","^2:","^4",44,"^Y","^1G","^6",44,"^10",1,"^11",true,"^N",["^O",["^P",["^O",[["^2;"]]]]],"^Q","Factory function for html-cljs.hooks$macros/Hook, taking a map of keywords to field values."],"~$mkhook",["^ ","^L",null,"^2",["^ ","^3","html_cljs/hooks$macros.cljc","^4",60,"^5",11,"^6",60,"^7",17,"^M",true,"^N",["^O",["^P",["^O",[["^16","~$hooks","~$&","^17"]]]]],"^13",["^ ","^X",true,"^14",2,"^10",2,"^S",["^O",[["^O",["^16","^2>","^17"]]]],"^N",["^O",[["^16","^2>","~$&","^17"]]],"^W",["^O",[null]]]],"^?","~$html-cljs.hooks$macros/mkhook","^3","html_cljs/hooks$macros.cljc","^7",17,"^13",["^ ","^X",true,"^14",2,"^10",2,"^S",["^O",[["^O",["^16","^2>","^17"]]]],"^N",["^O",[["^16","^2>","~$&","^17"]]],"^W",["^O",[null]]],"^S",["^O",[["^O",["^16","^2>","^17"]]]],"^V",null,"^14",2,"^W",["^O",[null]],"^5",1,"^X",true,"^19",[["^ ","^14",2,"^X",true,"^1:",["^<",["^Z","^["]]]],"^4",60,"^M",true,"^Y","^1;","^6",60,"^10",2,"^11",false,"^N",["^O",[["^16","^2>","~$&","^17"]]]]],"~:require-macros",["^ ","^E","^E"],"~:cljs.analyzer/constants",["^ ","^G",["^<",["~$cljs.core/defn","~$cljs.core/let","~$clc__10164__auto__","~$cljs.core/symbol","~$cljs.core/fn","~:f","~$f"]],"~:order",["^2E","^2B","~:f","~$f","^2D","^2F","^2C"]],"~:flags",["^ ","^H",["^<",[]]],"~:js-deps",["^ "],"~:deps",["^F","^E","^C"]]