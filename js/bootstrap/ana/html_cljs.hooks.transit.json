["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","all the hooks for this project.\n  \n  a hook is used with the cmp macro. A hook is a function that accepts any\n  number of params that the user supplies and returns a function that accepts\n  the vdom atom as its sole argument. The return value of that is the\n  user facing value that is returned in the hook-calls part of the component\n  creation. This is so the vdom-state atom may be passed in and used by the\n  hook without the user ever knowing about the inner workings/lifecycle of the\n  library.","~:file","html_cljs/hooks.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",20],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader"],"~:use-macros",["^ ","~$mkhook","~$html-cljs.hooks"],"~:excludes",["~#set",[]],"~:macros",["^ ","^=",["^ ","~:arglists",["~#list",[["~$props","~$hooks","~$&","~$body"]]],"^5",60,"^6",1,"^4","html_cljs/hooks.clj","~:name","~$html-cljs.hooks/mkhook","~:ns","^>","~:macro",true],"~$hook-meta",["^ ","^B",["^C",[[]]],"^3","would use this for the below macro to find the hooks invoked in the body","^5",4,"^6",1,"^4","html_cljs/hooks.clj","^G","~$html-cljs.hooks/hook-meta","^I","^>","^J",true],"~$with-hooks",["^ ","^B",["^C",[["~$funcname","^D","~$&","^F"]]],"^3","attempt to have macro search for hook invocations in the body rather than\n  have the hooks be explicitly passed. For now, a failed attempt since I am\n  unable to resolve symbols at compile time and get the metadata on them.","^5",8,"^6",1,"^4","html_cljs/hooks.clj","^G","~$html-cljs.hooks/with-hooks","^I","^>","^J",true]],"^G","^>","~:imports",null,"~:requires",["^ ","~$html-cljs.html","^R","~$html","^R","~$html-cljs.lifecycle","^T","~$lifecycle","^T","~$cljs.core","^V","~$goog","^W"],"~:seen",["^@",["~:require","~:require-macros"]],"~:shadow/js-access-global",["^@",["clearInterval","setInterval"]],"~:uses",null,"~:defs",["^ ","~$use-state",["^ ","~:protocol-inline",null,"^2",["^ ","^4","html_cljs/hooks.cljs","^5",16,"^6",7,"^7",16,"^8",16,"^B",["^C",["~$quote",["^C",[["~$clc"]]]]]],"^G","~$html-cljs.hooks/use-state","^4","html_cljs/hooks.cljs","^8",16,"~:method-params",["^C",[["^15"]]],"~:protocol-impl",null,"~:arglists-meta",["^C",[null,null]],"^6",1,"~:variadic?",false,"^5",16,"~:ret-tag","~$function","^7",16,"~:max-fixed-arity",1,"~:fn-var",true,"^B",["^C",["^14",["^C",[["^15"]]]]]],"~$use-effect",["^ ","^13",null,"^2",["^ ","^4","html_cljs/hooks.cljs","^5",27,"^6",7,"^7",27,"^8",17,"^B",["^C",["^14",["^C",[["^15"]]]]]],"^G","~$html-cljs.hooks/use-effect","^4","html_cljs/hooks.cljs","^8",17,"^17",["^C",[["^15"]]],"^18",null,"^19",["^C",[null,null]],"^6",1,"^1:",false,"^5",27,"^1;","^1<","^7",27,"^1=",1,"^1>",true,"^B",["^C",["^14",["^C",[["^15"]]]]]],"~$use-interval",["^ ","^13",null,"^2",["^ ","^4","html_cljs/hooks.cljs","^5",39,"^6",6,"^7",39,"^8",18],"^G","~$html-cljs.hooks/use-interval","^4","html_cljs/hooks.cljs","^8",18,"^17",["^C",[["~$clc__26110__auto__"]]],"^18",null,"^19",["^C",[]],"^6",1,"^1:",false,"^5",39,"^1;","^1<","^7",39,"^1=",1,"^1>",true,"^B",null]],"^Z",["^ ","^>","^>","^V","^V","^R","^R","^S","^R"],"~:cljs.analyzer/constants",["^ ","^X",["^@",["~$rarespare","^>"]],"~:order",["^>","^1E"]],"~:flags",["^ ","^Z",["^@",[]],"^Y",["^@",[]]],"~:js-deps",["^ "],"~:deps",["^W","^V","^R","^T"]]