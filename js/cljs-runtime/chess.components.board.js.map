{"version":3,"sources":["chess/components/board.cljs"],"mappings":"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","names":["chess.components.board/find-move","moves","move","vec__8665","cljs.core.nth","mfrom","mto","cljs.core.filter","p__8669","vec__8671","from","to","cljs.core._EQ_","chess.components.board/uiify","sq","i","j","state","set-state","on-move","vec__8690","move-here","cljs.core.assoc","cljs.core/mod","cljs.core.print","G__8702","p1__8681#","p1__8687#","chess.utils/nilmap","cljs.core/name","p1__8688#","chess.components.board/board","clc__7133__auto__","hooked-use-state8713","p__8721","map__8722","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","vec__8762","html-cljs.html/map->ElementInfo","cljs.core.map","cljs.core/vector","p__8776","vec__8777","seq__8778","cljs.core/seq","first__8779","cljs.core/first","cljs.core/next","c__7153__auto__","_","cljs.core/Symbol","iter__4529__auto__","s__8786","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__8788","cljs.core/chunk-buffer","i__8787","vec__8794","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__8785","cljs.core/chunk-rest","vec__8797","cljs.core/cons","cljs.core/rest","s__8801","b__8803","i__8802","vec__8804","iter__8800","vec__8807","board","player","html-cljs.hooks/use-state","board-size","x__4217__auto__","y__4218__auto__","js/window","row","chess.utils.zip","cljs.core.range","cljs.core/List","chess.components.board/board-row","p__8810","vec__8811","seq__8812","first__8813","s__8815","b__8817","i__8816","vec__8818","iter__8814","vec__8821","s__8831","b__8833","i__8832","vec__8835","iter__8830","vec__8843","chess.components.board/square","cljs.core.mapcat","cljs.core/identity","p__8853","map__8855","p__8864","vec__8866","seq__8867","first__8868","piece","selected","can-move-to","tint","on-click","color","p__8876","vec__8878","seq__8879","first__8880","p__8888","vec__8891","seq__8892","first__8893","cljs.core/chunk-first"],"sourcesContent":["(ns chess.components.board\n  (:require\n    [html-cljs.hooks :refer [use-state]]\n    [chess.utils :refer [zip nilmap]]\n    [html-cljs.html :as html :refer [cmp]]))\n\n(declare board-row\n         square)\n\n(defn find-move [moves move]\n  (let [[mfrom mto] move]\n    (filter (fn [[from to]]\n              (and (= from mfrom)\n                   (if (nil? mto)\n                     true\n                     (= to mto))))\n            moves)))\n\n(defn uiify [sq i j state set-state moves on-move]\n  (let [[move-here] (find-move moves [(state :selected) [i j]])]\n    (assoc sq\n           :tint (= (mod (+ j (mod i 2)) 2) 0)\n           :on-click (fn []\n                       (print \"clicked the thing!\" (nil? move-here))\n                       (if (nil? move-here)\n                         (set-state #(assoc % :selected [i j]))\n                         (on-move move-here)))\n           :can-move-to (not (nil? move-here))\n           :selected (= [i j] (state :selected))\n           :piece (nilmap (sq :piece) #(name %))\n           :color (nilmap (sq :color) #(name %)))))\n\n(def board\n    \"{:board - a 2d array containing the board. Always white on bottom, not matter\n            who the player is\n    :player - 'white' or 'black' - will flip the board if black}\"\n  (cmp [& {:keys [board player moves on-move]}]\n     [[state set-state] (use-state {:selected nil})]\n     {:type \"div\"\n      :style (let [board-size (* 0.8\n                      (min (.-innerWidth js/window)\n                           (.-innerHeight js/window)))]\n               {\"width\" (str board-size \"px\")\n                \"height\" (str board-size \"px\")\n                \"display\" \"inline-block\"\n                \"margin\" \"5px\"})}\n     (for [[row i] (zip board (range 8))]\n       (list board-row\n             row i state set-state moves on-move))))\n\n(def board-row\n  (cmp [row i state set-state moves on-move]\n       {:type \"div\"\n        :style {\"display\" \"flex\" \"height\" \"13%\"}}\n       (for [[sq j] (zip row (range 8))]\n         (cons square (mapcat identity\n                              (uiify sq i j (state)\n                                     set-state moves on-move))))))\n\n(def square\n  \"props are:\n  :peice [none|rook|pawn|...]\n  :tint [true|false]\n  :color [white|black]\"\n  (cmp [& {:keys [piece selected can-move-to tint on-click color]}]\n       {:type \"div\"\n        :style {\"float\" \"left\"\n                \"width\" \"15%\"\n                \"background\" (cond\n                               selected \"#40aad4\"\n                               can-move-to \"#4ae896\"\n                               tint \"#d4cebc\"\n                               :else \"#fff\")\n                \"border\" (if can-move-to\n                           \"1px dotted #40aad4\"\n                           \"1px solid #999\")}\n        :on {\"click\" #(on-click)}}\n       (when (some? piece)\n         (list\n           (list (cmp [piece color] {:type \"img\"\n                          :style {\"width\" \"90%\"}\n                          :elem-props {\"src\" (str \"./pieces/\" color\n                                                    \"_\" piece \".svg\")}})\n                 piece color)))))\n"]}