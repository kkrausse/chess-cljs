{"version":3,"sources":["chess/local-engine.cljs"],"mappings":"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","names":["x__4487__auto__","m__4488__auto__","chess.local-engine/apply-move","goog/typeOf","m__4485__auto__","cljs.core/missing-protocol","chess.local-engine/possible-moves","chess.local-engine/best-move","chess.local-engine/Engine","this","board","move","color","chess.local-engine/piece-seq","cljs.core.mapcat","cljs.core/identity","iter__4582__auto__","s__29296","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__29298","cljs.core/chunk-buffer","i__29297","vec__29299","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__29295","cljs.core/chunk-rest","vec__29312","cljs.core/first","cljs.core/cons","cljs.core/rest","row","i","chess.utils.zip","cljs.core.range","s__29303","b__29305","i__29304","vec__29306","iter__29302","vec__29309","s__29316","b__29318","i__29317","vec__29319","iter__29315","vec__29322","sq","j","chess.local-engine/find-piece","props","cljs.core.filter","p__29331","vec__29332","p1__29325#","p2__29326#","cljs.core.reduce","and__4174__auto__","s__29336","b__29338","i__29337","vec__29339","iter__29335","vec__29342","k","v","cljs.core._EQ_","cljs.core.map","p__29327","vec__29328","chess.local-engine/piece-at","chess.local-engine/color-dir","matchie29345","chess.local-engine/getall","chess.local-engine/on-line","di","dj","sofar","ci","cj","fexpr__29351","fexpr__29352","chess.local-engine/can-place","fexpr__29354","chess.local-engine/castle-moves","vec__29355","vec__29358","ki","kj","rooks","p__29361","vec__29362","ri","rj","p1__29346#","p2__29347#","s__29366","b__29368","i__29367","vec__29369","iter__29365","vec__29372","chess.local-engine/piece-moves","matchie29379","cljs.core.concat","s__29381","xs__6292__auto__","iterys__4578__auto__","s__29383","b__29385","i__29384","iter__29382","fs__4579__auto__","iter__29380","s__29387","s__29389","b__29391","i__29390","iter__29388","iter__29386","cljs.core.apply","cljs.core/concat","s__29393","s__29395","b__29397","i__29396","iter__29394","iter__29392","s__29399","s__29401","b__29403","i__29402","iter__29400","iter__29398","s__29405","s__29407","b__29409","i__29408","iter__29406","iter__29404","p__29410","vec__29411","fexpr__29414","p__29415","vec__29416","cljs.core.prn","fexpr__29419","G__29420","chess.local-engine/other-color","cljs.core/List","p__29375","vec__29376","p","p__29421","vec__29422","p1__29348#","p__29425","vec__29426","chess.local-engine/local-apply-move","from1","to1","from2","to2","js/console","s__29430","b__29432","i__29431","vec__29433","iter__29429","vec__29446","s__29437","b__29439","i__29438","vec__29440","iter__29436","vec__29443","s__29450","b__29452","i__29451","vec__29453","iter__29449","vec__29456","cljs.core.assoc","chess.local-engine/local-engine","js/chess","js/chess.local-engine","js/chess.local-engine.t_chess$local_engine29460","chess.local-engine/t_chess$local_engine29460","_29462","meta29461","cljs.core/PROTOCOL_SENTINEL","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","chess.local-engine/->t_chess$local_engine29460","_","new-board","king","cljs.core/not","p1__29459#","cljs.core/some","cljs.core/chunk-first"],"sourcesContent":["(ns chess.local-engine\n  (:require [html-cljs.hooks :as hooks]\n            [html-cljs.html :as html]\n            [chess.utils :refer [zip match plusminus]]))\n\n(defprotocol Engine\n  \"interface for the chess ai. board is indexed like this:\n  board[i][j] is like\n    i = [8 7 6 ...], so reversed and indexed at zero,\n    j = [a b c ...], so normal, but indexed at zero.\n  so, if you're looking at the board and you are playing white, the top left is\n  0,0 and moving one square closer to the white side is 1,0\"\n  (apply-move [this board move] \"applies the move where move is of the form [[fromi fromj] [toi toj]...]\n                          in the case of castling, theres more than one move, thus the '...'\")\n\n  (possible-moves [this board color] \"returns a sequence of possible moves for\n                                     the given color. If empty, that color just\n                                     lost\")\n  (best-move [this board color] \"the ai's decision of the best possible move. If\n                                nil, then the other player won\"))\n\n(defn piece-seq [board]\n  (mapcat identity\n          (for [[row i] (zip board (range 8))]\n            (for [[sq j] (zip row (range 8))]\n              [i j sq]))))\n\n(defn find-piece [board props]\n  (->> (piece-seq board)\n       (filter (fn [[i j sq]]\n                 (reduce #(and %1 %2)\n                        (for [[k v] props]\n                          (= v (sq k))))))\n       (map (fn [[i j sq]] [i j]))))\n\n(defn piece-at [board i j]\n  \"basic index of the board as described above\"\n  (nth (nth board i) j))\n\n(defn color-dir [sq]\n  (match (sq :color)\n         :white -1\n         :black 1))\n\n(defn getall [board color]\n  \"gets all legal moves even if it endangers the king\"\n\n  (defn on-line [board i j di dj color]\n    (loop [sofar []\n           ci (+ i di)\n           cj (+ j dj)]\n      (cond\n        ;off board\n        (or (>= ci 8) (>= cj 8) (< ci 0) (< cj 0)) sofar\n        ;my piece\n        (= ((piece-at board ci cj) :color) color) sofar\n        ;the other color\n        (not (nil? ((piece-at board ci cj) :piece))) (cons [ci cj] sofar)\n        ;empty space\n        :else (recur (cons [ci cj] sofar) (+ ci di) (+ cj dj)))))\n\n  (defn can-place [board i j color]\n    (and\n      (not (or (>= i 8) (>= j 8) (< i 0) (< j 0)))\n      (not (= ((piece-at board i j) :color) color))))\n\n  (defn castle-moves [board color]\n    (let [[[ki kj]] (find-piece board {:piece :king :color color})\n          rooks (find-piece board {:piece :rook :color color})]\n      (if (:moved (piece-at board ki kj))\n        []\n        (mapcat (fn [[ri rj]]\n                  (if (:moved (piece-at board ri rj))\n                    []\n                    (if (reduce #(and %1 %2)\n                                (for [[i j] (zip [ki ki ki ki ki]\n                                                 (if (< rj kj)\n                                                   (range (inc rj) kj)\n                                                   (range (inc kj) rj)))]\n                                  (and (can-place board i j :white) (can-place board i j :black))))\n                      (if (< rj kj)\n                        [[[ki kj] [ki (- kj 2)] [ri rj] [ri (dec kj)]]]\n                        [[[ki kj] [ki (+ kj 2)] [ri rj] [ri (inc kj)]]])\n                      [])))\n                rooks))))\n\n  (defn piece-moves [board i j sq]\n    (->> (match (sq :piece)\n           :rook (concat\n                   (on-line board i j 1 0 (sq :color))\n                   (on-line board i j -1 0 (sq :color))\n                   (on-line board i j 0 1 (sq :color))\n                   (on-line board i j 0 -1 (sq :color)))\n\n           :knight (concat\n                     (plusminus [di 1 dj 2]\n                                [(+ i di) (+ j dj)])\n                     (plusminus [di 2 dj 1]\n                                [(+ i di) (+ j dj)]))\n\n           :bishop (apply concat\n                          (plusminus [di 1 dj 1]\n                                     (on-line board i j di dj (sq :color))))\n\n           ; castling is added somewhere else!\n           :king (for [di [-1 0 1] dj [-1 0 1]]\n                   [(+ i di) (+ j dj)])\n\n           :queen (apply concat\n                         (for [di [-1 0 1] dj [-1 0 1]]\n                         (on-line board i j di dj (sq :color))))\n\n           ; TODO: pawn attacks\n           :pawn (concat\n                   (filter (fn [[i j]] (nil? ((piece-at board i j) :piece)))\n                           (cons [(+ i (color-dir sq)) j]\n                                 (if (sq :moved)\n                                   []\n                                   [[(+ i (* 2 (color-dir sq))) j]])))\n                   (filter (fn [[i j]]\n                             (and (can-place board i j (sq :color))\n                                  (do (prn \"testing-\" i j) true)\n                                  (= ((piece-at board i j) :color) (other-color (sq :color)))))\n                           (list [(+ i (color-dir sq)) (dec j)] [(+ i (color-dir sq)) (inc j)]))))\n\n         (filter (fn [[i j]] (can-place board i j (sq :color))))\n         (map (fn [p] [[i j] p]))))\n\n  (->> (piece-seq board)\n       (filter (fn [[i j sq]]\n                 (= color (sq :color))))\n       (map #(apply piece-moves (cons board %)))\n       (cons (castle-moves board color))\n       (mapcat identity)))\n\n(defn local-apply-move [board [from1 to1 from2 to2]]\n  (prn \"doing move: \" [from1 to1 from2 to2])\n  (.log js/console \"doing move: \" [from1 to1 from2 to2])\n  (for [[row i] (zip board (range 8))]\n    (for [[sq j] (zip row (range 8))]\n      (cond\n        (or (= from1 [i j]) (= from2 [i j])) {}\n        (= to1 [i j]) (assoc (apply piece-at (cons board from1)) :moved true)\n        (= to2 [i j]) (assoc (apply piece-at (cons board from2)) :moved true)\n        :else sq))))\n\n(def local-engine (do\n  (reify Engine\n\n    (apply-move [_ board move] (local-apply-move board move))\n\n    (possible-moves [this board color]\n      (->> (getall board color)\n           ;filter out those moves where the king is in danger!\n           (filter (fn [move]\n                     (let [new-board (apply-move this board move)\n                           king (find-piece new-board {:piece :king :color color})]\n                       (not (some #(do (prn \"comparing \" king \" and \" %) (= king %)) (mapcat identity (getall new-board (other-color color))))))))\n           ))\n\n    (best-move [_ board color]))))\n\n"]}