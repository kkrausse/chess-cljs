{"version":3,"sources":["chess/core.cljs"],"mappings":"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","names":["chess.core/use-chan","clc__7188__auto__","hooked-use-state9857","hooked-use-effect9858","vec__9859","cljs.core.nth","channel","cur","setcur","html-cljs.hooks/use-state","seteffect","html-cljs.hooks/use-effect","G__9862","cljs.core.print","c__8853__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__8854__auto__","switch__8646__auto__","state_9882","state_val_9883","cljs.core.async.impl.ioc-helpers/take!","inst_9864","inst_9865","statearr-9884","statearr-9885","statearr-9886","statearr-9887","inst_9880","cljs.core.async.impl.ioc-helpers/return-chan","inst_9868","inst_9869","temp__5733__auto__","inst_9870","statearr-9888","inst_9875","inst_9876","statearr-9889","inst_9878","statearr-9890","inst_9872","statearr-9891","statearr-9892","statearr-9893","state-machine__8647__auto__","ret-value__8648__auto__","result__8649__auto__","cljs.core/keyword-identical?","ex__8650__auto__","e9894","statearr-9895","cljs.core/seq","statearr-9896","cljs.core/first","state__8855__auto__","statearr-9897","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","item","cljs.core.println","cljs.core/identity","chess.core/abs","n","x__4214__auto__","y__4215__auto__","chess.core/dots","hooked-use-interval9898","vec__9899","html-cljs.html/map->ElementInfo","cljs.core.assoc","cljs.core.map","cljs.core/vector","p__9902","vec__9903","seq__9904","first__9905","cljs.core/next","c__7208__auto__","_","cljs.core/Symbol","cljs.core/rest","t","togglet","html-cljs.hooks/use-interval","numdots","cljs.core/mod","cljs.core.apply","cljs.core/str","cljs.core.range","chess.core/status-bar","hooked-use-chan9906","hooked-use-effect9907","p__9908","vec__9909","seq__9910","first__9911","status-chan","status","cljs.core.filter","cljs.core/some?","cljs.core/List","p__9912","vec__9913","seq__9914","first__9915","p__9916","vec__9917","seq__9918","first__9919","clojure.string/includes?","chess.core/game","hooked-use-async-engine9920","vec__9921","p__9924","vec__9925","seq__9926","first__9927","board-data","moves","on-move","chess.engine.hook/use-async-engine","chess.components.board/board","js/chess","js/chess.core","js/chess.core.mounted","chess.core/mounted","cljs.core.atom","chess.core/mount-root","component","cljs.core.swap_BANG_","old-vdom-node","html-cljs.html/destroy-node","html-cljs.html/mount","js/document","chess.core/init"],"sourcesContent":["(ns chess.core\n  (:require\n    [chess.components.board :refer [board]]\n    [html-cljs.html :as html :refer [cmp]]\n    [html-cljs.hooks :refer [use-effect use-state use-interval mkhook]]\n    [chess.utils :refer [zip nilmap]]\n    [clojure.core.async :refer [go >! <! chan]]\n    [chess.engine.hook :refer [use-async-engine]]))\n\n(def use-chan\n  (mkhook [channel] [[cur setcur] (use-state \"no status\")\n                     seteffect (use-effect)]\n          (seteffect (fn []\n                       (print \"mounting hook\")\n                       (go (loop [item (<! channel)]\n                             (if-let [item item]\n                               (do\n                                 (println \"putting \" item)\n                                  (setcur #(do item))\n                                   (recur (<! channel)))\n                               (setcur #(do nil)))))\n                       identity))\n          (cur)))\n\n(defn abs [n] (max n (- n)))\n\n(def dots (cmp [] [[t togglet] (use-interval 300)]\n               {:type \"span\"\n                :content (let [numdots (abs (- (mod t 6) 3))]\n                           (apply str (map #(do \".\") (range numdots))))}))\n\n(def status-bar\n  (cmp [status-chan] [status (use-chan status-chan)\n                      seteffect (use-effect)]\n       {:type \"div\"\n        :style {\"text-align\" \"left\" \"margin-left\" \"13%\"}}\n       (filter some?\n               (list \n                 (list (cmp [status] {:type \"span\"\n                                      :content status}) status)\n                 (when (clojure.string/includes? status \"loading\")\n                   (list dots))))))\n\n(defn game []\n  (let [status-chan (chan 2)]\n    (cmp [] [[board-data moves on-move] (use-async-engine :white status-chan)]\n         {:type \"div\"\n          :style {\"width\" \"100%\" \"height\" \"100%\"}}\n         (list\n           (list status-bar status-chan)\n           (list board\n                 :board board-data\n                 :player :white\n                 :moves moves\n                 :on-move on-move)))))\n\n(defonce mounted (atom nil))\n\n(defn mount-root [component]\n  (swap! mounted\n         (fn [old-vdom-node]\n           (if (some? old-vdom-node)\n             (html/destroy-node old-vdom-node))\n           (html/mount\n             (.getElementById js/document \"app\")\n             component))))\n\n(defn ^:export init []\n\n  (mount-root (game))\n  \n  )\n"]}