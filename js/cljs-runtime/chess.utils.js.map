{"version":3,"sources":["chess/utils.cljs"],"mappings":"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","names":["chess.utils/nilmap","x","f","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","chess.utils/zip","seq35847","self__4777__auto__","cljs.core/seq","seqs","cljs.core.apply","cljs.core/map","cljs.core/cons","cljs.core/vector","chess.utils/maxf","xs","G__35851","vec__35852","seq__35853","first__35854","cljs.core/first","cljs.core/next","vec__35861","seq__35862","first__35863","head","remaining","cur-max","cur-max-x","vec__35864","cljs.core.nth","cur-val","maxv","maxx","cljs.core._EQ_","cljs.core.rand","cljs.core/empty?","chess.utils/init-worker","handler","js/self.addEventListener","e","js/postMessage","cljs.core.prn_str","G__35867","cljs.reader.read_string","chess.utils/load-worker","filename","c","cljs.core.async.chan","reply-chan","worker","js/Worker","c__26769__auto__","cljs.core.async.impl.dispatch/run","f__26770__auto__","switch__26731__auto__","state_35872","state_val_35873","inst_35868","cljs.core.async.impl.ioc-helpers/put!","inst_35870","cljs.core.async.impl.ioc-helpers/return-chan","statearr-35874","state-machine__26732__auto__","ret-value__26733__auto__","result__26734__auto__","cljs.core/keyword-identical?","e35875","js/Object","ex__26735__auto__","statearr-35876","cljs.core.async.impl.ioc-helpers/process-exception","state__26771__auto__","statearr-35877","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","state_35916","state_val_35917","inst_35912","statearr-35918","cljs.core.async.impl.ioc-helpers/take!","inst_35914","statearr-35919","inst_35889","inst_35894","inst_35895","inst_35896","inst_35897","statearr-35920","statearr-35921","statearr-35922","inst_35886","inst_35887","inst_35888","statearr-35923","statearr-35924","inst_35902","inst_35903","inst_35899","inst_35900","statearr-35925","inst_35908","statearr-35926","statearr-35927","inst_35905","inst_35906","statearr-35928","statearr-35929","e35930","statearr-35931","statearr-35932","cljs.core/not","cljs.core.pr_str","cljs.core.async/close!"],"sourcesContent":["(ns chess.utils\n  (:require-macros [chess.utils :refer [match plusminus]])\n  (:require [clojure.core.async :refer [go go-loop >! <! chan close!]]\n            [cljs.reader :refer [read-string]]))\n\n(defn nilmap [x f]\n  (if (not (nil? x)) (f x)))\n\n(defn zip [& seqs]\n  (apply map (cons vector seqs)))\n\n(defn maxf [f xs]\n  (loop [[head & remaining] xs\n         cur-max (f head)\n         cur-max-x head]\n    (let [cur-val (f head)\n          [maxv maxx] (cond\n                        (> cur-val cur-max) [cur-val head]\n                        (= cur-val cur-max) (if (> (rand) 0.5)\n                                              [cur-max cur-max-x]\n                                              [cur-val head])\n                        :else [cur-max cur-max-x])]\n      (if (empty? remaining)\n        maxx\n        (recur remaining\n               maxv\n               maxx)))))\n\n(defn init-worker [handler]\n  (js/self.addEventListener \"message\" (fn [^js e] (js/postMessage (prn-str (handler (read-string (.-data e))))))))\n\n(defn load-worker [filename]\n  \"loads the worker by filename. usage:\n  (let [c (chan)]\n    (>! (load-worker fname) [query c])\n    (prn 'got response: ' (<! c)))\"\n  (let [c (chan)\n        reply-chan (chan)\n        worker (js/Worker. filename)]\n    (.addEventListener worker \"message\" (fn [^js e] (go (>! reply-chan (.-data e)))))\n    (go-loop [[query resp] (<! c)]\n             (if (not (nil? query))\n               (do\n                 (.postMessage worker (pr-str query))\n                 (>! resp (read-string (<! reply-chan)))\n                 (close! resp)\n                 (recur (<! c)))))\n    c))\n"]}