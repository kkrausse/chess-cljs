{"version":3,"sources":["html_cljs/lifecycle.cljs"],"mappings":";AAEA,AAAA;AAAA;;;;;;AAAA,AAAaa;;AAAb,AAAAb,AAAA,AAIac,AAAKC;AAJlB,AAAA,AAAAd,AAAA,AAAA,AAAA,AAAA,AAIaa,AAAAA;AAJbZ,AAAA,AAAAC,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAIaY,AAAAA,AAAKC,AAAAA;;AAJlB,AAAAV,AAAA,AAAAF,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAIaS,AAAAA,AAAKC,AAAAA;;AAJlB,AAAA,AAAAT,AAAA,AAIaQ;;;;AAJb,AAAA;;;;;;;AAAA,AAIGX,AAAUW,AAAKC;AAJlB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIaD,AAAAA;AAJb,AAIaA,AAAAA,AAAKC;;AAJlB,AAAAf,AAIac,AAAKC;;;;AAJlB,AAAAR,AAAA,AAUaO;AAVb,AAAA,AAAAb,AAAA,AAAA,AAAA,AAAA,AAUaa,AAAAA;AAVbZ,AAAA,AAAAM,AAAA,AAAAJ,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAUaY,AAAAA;;AAVb,AAAAT,AAAA,AAAAG,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAUaS,AAAAA;;AAVb,AAAA,AAAAR,AAAA,AAUaQ;;;;AAVb,AAAA;;;AAAA,AAUGN,AAAUM;AAVb,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAUaA,AAAAA;AAVb,AAUaA,AAAAA;;AAVb,AAAAP,AAUaO;;;;AAVb,AAAAL,AAAA,AAWaK,AAAKE;AAXlB,AAAA,AAAAf,AAAA,AAAA,AAAA,AAAA,AAWaa,AAAAA;AAXbZ,AAAA,AAAAQ,AAAA,AAAAN,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAWaY,AAAAA,AAAKE,AAAAA;;AAXlB,AAAAX,AAAA,AAAAK,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAL,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAWaS,AAAAA,AAAKE,AAAAA;;AAXlB,AAAA,AAAAV,AAAA,AAWaQ;;;;AAXb,AAAA;;;AAAA,AAWGJ,AAAUI,AAAKE;AAXlB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAWaF,AAAAA;AAXb,AAWaA,AAAAA,AAAKE;;AAXlB,AAAAP,AAWaK,AAAKE;;;;AAXlB,AAAAL,AAAA,AAYeG,AAAKE;AAZpB,AAAA,AAAAf,AAAA,AAAA,AAAA,AAAA,AAYea,AAAAA;AAZfZ,AAAA,AAAAU,AAAA,AAAAR,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAYeY,AAAAA,AAAKE,AAAAA;;AAZpB,AAAAX,AAAA,AAAAO,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAP,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAYeS,AAAAA,AAAKE,AAAAA;;AAZpB,AAAA,AAAAV,AAAA,AAYeQ;;;;AAZf,AAAA;;;AAAA,AAYGF,AAAYE,AAAKE;AAZpB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAYeF,AAAAA;AAZf,AAYeA,AAAAA,AAAKE;;AAZpB,AAAAL,AAYeG,AAAKE;;;;AAZpB,AAcA,AAAA,AAAMC,AAASC;AAAf,AACE,AAACf,AAASe,AAAI,AAACV,AAASU","names":["html-cljs$lifecycle$LifecycleHooks$rerender$dyn","x__4428__auto__","m__4429__auto__","html-cljs.lifecycle/rerender","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","html-cljs$lifecycle$LifecycleHooks$getprops$dyn","html-cljs.lifecycle/getprops","html-cljs$lifecycle$LifecycleHooks$on_mount$dyn","html-cljs.lifecycle/on-mount","html-cljs$lifecycle$LifecycleHooks$on_destroy$dyn","html-cljs.lifecycle/on-destroy","html-cljs.lifecycle/LifecycleHooks","this","new-props","f","html-cljs.lifecycle/refresh","clc"],"sourcesContent":["(ns html-cljs.lifecycle)\n\n(defprotocol LifecycleHooks\n  \"passed to a component / hooks as the user interface to the library.\n  The underlying dom element may be updated / deleted and recreated\n  transparently without a full rerender.\"\n  (rerender [this new-props]\n           \"call this to trigger refresh. used for hooks mainly when they\n           want to re-trigger a render because of updating state. May\n           delete and re-create the dom-element but will never delete the\n           vdom node (nor can it if it wanted to since it doesn't have\n           access to the original component function that made this node)\")\n  (getprops [this] \"gets the props for refresh\")\n  (on-mount [this f] \"register callback on mounting\")\n  (on-destroy [this f] \"calls f when the vdom element is destroyed\"))\n\n(defn refresh [clc]\n  (rerender clc (getprops clc)))\n"]}