{"version":3,"sources":["chess/worker.cljs"],"mappings":"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","names":["js/chess","js/chess.worker","js/chess.worker.c-state","chess.worker/c-state","cljs.js.empty_state","js/chess.worker.inited","chess.worker/inited","cljs.core.async.chan","js/chess.worker._","chess.worker/_","shadow.cljs.bootstrap.browser/init","chess.utils/asset-path","c__8853__auto__","cljs.core.async.impl.dispatch/run","f__8854__auto__","switch__8646__auto__","state_9590","state_val_9591","cljs.core.async.impl.ioc-helpers/put!","inst_9587","inst_9588","statearr-9592","cljs.core.async.impl.ioc-helpers/return-chan","statearr-9593","state-machine__8647__auto__","ret-value__8648__auto__","result__8649__auto__","cljs.core/keyword-identical?","ex__8650__auto__","e9594","statearr-9595","cljs.core/seq","statearr-9596","cljs.core/first","state__8855__auto__","statearr-9597","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core.async/close!","chess.worker/init-worker","handler","js/self","e","state_9610","state_val_9611","inst_9601","inst_9603","inst_9604","cljs.core.async.impl.ioc-helpers/take!","inst_9606","inst_9607","inst_9608","statearr-9615","e9617","statearr-9618","statearr-9620","statearr-9622","js/postMessage","cljs.core.prn_str","cljs.reader.read_string","chess.worker/eval-form","source","c","p1__9623#","cljs.js.eval","cljs.js/js-eval","cljs.core.partial","shadow.cljs.bootstrap.browser/load","state_9631","state_val_9633","inst_9628","inst_9629","statearr-9636","statearr-9638","e9640","statearr-9642","statearr-9644","statearr-9647","chess.worker/pf","thing","cljs.core.prn","chess.worker/init","msg","state_9655","state_val_9656","inst_9650","inst_9651","statearr-9661","inst_9653","statearr-9664","e9666","statearr-9668","statearr-9670","statearr-9673"],"sourcesContent":["(ns chess.worker\n  (:require\n    ;eval stuff\n    [cljs.js :as cljs]\n    [shadow.cljs.bootstrap.browser :as boot]\n   ; engine stuff. no longer required, really \n   [chess.engine.core :refer [Engine\n                              other-color\n                              apply-move\n                              possible-moves\n                              best-move]]\n   [chess.engine.local-engine :refer [local-engine]]\n   [clojure.core.async :refer [go go-loop >! <! chan close!]]\n   [chess.utils :refer [match asset-path]]\n   [cljs.reader :refer [read-string]]))\n\n;; Set up eval environment\n\n(defonce c-state (cljs/empty-state))\n\n(defonce inited (chan 1))\n\n(defonce _\n         (boot/init c-state\n                    {:path (asset-path \"/js/bootstrap\")}\n                    (fn []\n                      (go (>! inited true) (close! inited)))))\n\n(defn init-worker [handler]\n  \"handler is a function that returns something on a channel always\"\n  ;FIXME refactor this thing to thread it (i.e. (-> e ...)\n  \n  (aset js/self \"onmessage\" (fn [^js e] (go (js/postMessage (prn-str (<! (handler (read-string (.-data e))))))))))\n\n(defn eval-form [source]\n  (let [c (chan 1)]\n    (cljs/eval\n      c-state\n      source\n      {:eval cljs/js-eval\n       :load (partial boot/load c-state)}\n      #(go \n         (>! c %)\n         (close! c)))\n    c))\n\n(defn pf [thing]\n  (prn thing)\n  thing)\n\n(defn init []\n  (init-worker\n    (fn [msg]\n      (go\n        (<! inited)\n        (<! (eval-form msg))))))\n"]}