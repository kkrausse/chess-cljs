{"version":3,"sources":["chess/engine.cljs"],"mappings":"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","names":["chess.engine/init-board","chess.engine/main-row","color","iter__4582__auto__","s__29511","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__29513","cljs.core/chunk-buffer","i__29512","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__29510","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","piece","chess.engine/pawn-row","s__29515","b__29517","i__29516","iter__29514","_","cljs.core.range","chess.engine/empty-row","s__29519","b__29521","i__29520","iter__29518","x","cljs.core/List","cljs.core.concat","s__29523","b__29525","i__29524","iter__29522","chess.engine/other-color","matchie29526","cljs.core._EQ_","chess.engine/use-engine","my-color","cljs.core.atom","board","moves","chess.engine/possible-moves","chess.local-engine/local-engine","cljs.core/deref","vdom-state","move","cljs.core.prn","p1__29527#","cljs.core.swap_BANG_","chess.engine/apply-move","p1__29528#","cljs.core/reset!","G__29529","G__29530","G__29531","html_cljs.html.refresh","cljs.core/chunk-first"],"sourcesContent":["(ns chess.engine\n  (:require [html-cljs.hooks :as hooks]\n            [html-cljs.html :as html]\n            [chess.local-engine :refer [local-engine]]\n            [chess.utils :refer [zip match plusminus]]))\n\n(def init-board (do\n  (defn main-row [color]\n    (for [piece [:rook :knight :bishop :king :queen :bishop :knight :rook]]\n      {:piece piece :color color :moved false}))\n\n  (defn pawn-row [color]\n    (for [_ (range 8)]\n      {:piece :pawn :color color :moved false}))\n\n  (def empty-row\n    (for [x (range 8)]\n      {}))\n\n  (-> (list (main-row :black) (pawn-row :black))\n      (concat (for [_ (range 4)] empty-row))\n      (concat\n        (list (pawn-row :white) (main-row :white))))))\n\n(defn other-color [color]\n  (match color\n         :white :black\n         :black :white))\n\n(defn use-engine [my-color]\n  \"all the pure logic and serves as the gateway to the UI\n  returns: [board moves on-move]\n    board - the current board\n    moves - the player's available moves\"\n  (let [color (atom my-color)\n        board (atom init-board)\n        moves (atom (possible-moves local-engine init-board my-color))]\n    (fn [vdom-state]\n      [@board\n       @moves\n       (fn [move] ;TODO: set move to true for that piece!\n         (prn \"doing move: \" move)\n         (swap! board #(apply-move local-engine % move))\n         (swap! color #(other-color %))\n         (reset! moves (possible-moves local-engine @board @color))\n         (html/refresh vdom-state))])))\n\n\n"]}