{"version":3,"sources":["chess/engine/core.cljs"],"mappings":"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","names":["chess.engine.core/init-board","chess.engine.core/main-row","color","iter__4582__auto__","s__27347","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__27349","cljs.core/chunk-buffer","i__27348","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__27346","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","piece","chess.engine.core/pawn-row","s__27356","b__27358","i__27357","iter__27355","_","cljs.core.range","chess.engine.core/empty-row","s__27363","b__27365","i__27364","iter__27362","x","cljs.core/List","cljs.core.concat","s__27374","b__27376","i__27375","iter__27373","chess.engine.core/other-color","matchie27381","cljs.core._EQ_","x__4487__auto__","m__4488__auto__","chess.engine.core/apply-move","goog/typeOf","m__4485__auto__","cljs.core/missing-protocol","chess.engine.core/possible-moves","chess.engine.core/best-move","chess.engine.core/Engine","this","board","move","cljs.core/chunk-first"],"sourcesContent":["(ns chess.engine.core\n  (:require [html-cljs.hooks :as hooks]\n            [chess.utils :refer [zip match plusminus]]))\n\n(def init-board (do\n  (defn main-row [color]\n    (for [piece [:rook :knight :bishop :king :queen :bishop :knight :rook]]\n      {:piece piece :color color :moved false}))\n\n  (defn pawn-row [color]\n    (for [_ (range 8)]\n      {:piece :pawn :color color :moved false}))\n\n  (def empty-row\n    (for [x (range 8)]\n      {}))\n\n  (-> (list (main-row :black) (pawn-row :black))\n      (concat (for [_ (range 4)] empty-row))\n      (concat\n        (list (pawn-row :white) (main-row :white))))))\n\n(defn other-color [color]\n  (match color\n         :white :black\n         :black :white))\n\n(defprotocol Engine\n  \"interface for the chess ai. board is indexed like this:\n  board[i][j] is like\n    i = [8 7 6 ...], so reversed and indexed at zero,\n    j = [a b c ...], so normal, but indexed at zero.\n  so, if you're looking at the board and you are playing white, the top left is\n  0,0 and moving one square closer to the white side is 1,0\"\n  (apply-move [this board move] \"applies the move where move is of the form [[fromi fromj] [toi toj]...]\n                          in the case of castling, theres more than one move, thus the '...'\")\n\n  (possible-moves [this board color] \"returns a sequence of possible moves for\n                                     the given color. If empty, that color just\n                                     lost\")\n  (best-move [this board color] \"the ai's decision of the best possible move. If\n                                nil, then the other player won\"))\n"]}