{"version":3,"sources":["chess/engine/hook.cljs"],"mappings":"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","names":["chess.engine.hook/use-async-engine","clc__7133__auto__","hooked-use-state9658","hooked-use-state9659","hooked-use-state9660","hooked-use-effect9661","vec__9665","cljs.core.nth","vec__9668","vec__9671","my-color","status-chan","getcolor","setcolor","html-cljs.hooks/use-state","getboard","setboard","chess.engine.core/init-board","getmoves","setmoves","set-effect","html-cljs.hooks/use-effect","G__9677","c__8718__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__8719__auto__","switch__8646__auto__","state_9693","state_val_9694","cljs.core.async.impl.ioc-helpers/put!","inst_9681","inst_9682","inst_9683","statearr-9697","cljs.core.async.impl.ioc-helpers/take!","inst_9685","statearr-9699","inst_9687","inst_9689","inst_9690","statearr-9701","cljs.core.async.impl.ioc-helpers/return-chan","statearr-9703","state-machine__8647__auto__","ret-value__8648__auto__","result__8649__auto__","cljs.core/keyword-identical?","ex__8650__auto__","e9705","statearr-9707","cljs.core/seq","statearr-9708","cljs.core/first","state__8720__auto__","statearr-9711","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","init-moves","chess.engine.worker-engine/worker-engine","cljs.core/identity","move","state_9747","state_val_9748","inst_9712","inst_9713","inst_9715","inst_9716","inst_9717","inst_9718","inst_9719","inst_9720","statearr-9752","inst_9722","inst_9723","inst_9724","inst_9725","statearr-9756","inst_9727","inst_9728","inst_9729","statearr-9757","inst_9731","inst_9732","inst_9733","inst_9734","inst_9735","statearr-9764","inst_9737","inst_9738","inst_9739","statearr-9765","inst_9741","inst_9742","inst_9743","statearr-9766","statearr-9768","e9770","statearr-9771","statearr-9773","statearr-9785","my-board","chess.engine.core/other-color","opp-move","new-board","new-moves"],"sourcesContent":["(ns chess.engine.hook\n  (:require-macros [html-cljs.hooks :refer [mkhook]])\n  (:require [chess.engine.core :refer [init-board\n                                       other-color\n                                       apply-move\n                                       possible-moves\n                                       best-move]]\n            [chess.engine.local-engine :refer [local-engine]]\n            [chess.engine.worker-engine :refer [worker-engine]]\n            [html-cljs.html :as html]\n            [html-cljs.hooks :refer [use-state use-effect]]\n            [clojure.core.async :refer [go >! <! chan]]))\n\n(def use-async-engine\n  (mkhook [my-color status-chan] [[getcolor setcolor] (use-state my-color)\n                                  [getboard setboard] (use-state init-board)\n                                  [getmoves setmoves] (use-state [])\n                                  set-effect (use-effect)]\n          (set-effect (fn []\n                        (go\n                          (>! status-chan \"loading bootstraped workers\")\n                          (let [init-moves (<! (possible-moves worker-engine\n                                                                 (getboard)\n                                                                 my-color))]\n                            (>! status-chan \"white's turn!\")\n                            (setmoves #(do init-moves))))\n                        identity))\n          [(getboard)\n           (getmoves)\n           (fn [move]\n             (go (let [my-board (<! (apply-move worker-engine (getboard) move))]\n                   (setcolor other-color)\n                   (setboard #(do my-board)))\n                   (setmoves #(do []))\n                   (>! status-chan \"loading move\")\n                   (let [opp-move (<! (best-move worker-engine\n                                                 (getboard)\n                                                 (other-color my-color)))\n                         new-board (<! (apply-move worker-engine (getboard)\n                                                   opp-move))]\n                     (setboard #(do new-board)))\n                   (let [new-moves (<! (possible-moves worker-engine\n                                                      (getboard) my-color))]\n                     (setmoves #(do new-moves)))\n                   (>! status-chan \"white's turn\")\n                   (setcolor #(do my-color))))]))\n"]}