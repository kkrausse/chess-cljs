{"version":3,"sources":["chess/engine/worker_engine.cljs"],"mappings":"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","names":["chess.engine.worker-engine/load-worker","filename","id","c","cljs.core.async.chan","reply-chan","worker","js/Worker","e","chess.engine.worker-engine/printl","c__8853__auto__","cljs.core.async.impl.dispatch/run","f__8854__auto__","switch__8646__auto__","state_9167","state_val_9168","inst_9162","inst_9163","cljs.core.async.impl.ioc-helpers/put!","inst_9165","cljs.core.async.impl.ioc-helpers/return-chan","statearr-9169","state-machine__8647__auto__","ret-value__8648__auto__","result__8649__auto__","cljs.core/keyword-identical?","ex__8650__auto__","e9176","statearr-9177","cljs.core/seq","statearr-9180","cljs.core/first","state__8855__auto__","statearr-9184","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","state_9270","state_val_9271","statearr-9272","inst_9222","inst_9242","cljs.core.apply","cljs.core/hash-map","statearr-9273","inst_9246","inst_9255","inst_9256","cljs.core.async.impl.ioc-helpers/take!","statearr-9274","statearr-9275","statearr-9276","statearr-9277","inst_9268","inst_9247","inst_9245","cljs.core.get","inst_9248","inst_9249","statearr-9278","statearr-9279","statearr-9280","statearr-9281","inst_9262","statearr-9282","statearr-9283","inst_9266","statearr-9284","statearr-9285","inst_9194","inst_9203","inst_9204","inst_9205","inst_9206","cljs.core/PROTOCOL_SENTINEL","inst_9207","statearr-9286","statearr-9287","inst_9226","inst_9227","cljs.core/not","statearr-9288","statearr-9289","inst_9200","inst_9201","statearr-9290","statearr-9291","statearr-9292","inst_9251","inst_9252","inst_9253","statearr-9293","inst_9237","statearr-9294","inst_9219","inst_9220","inst_9221","statearr-9295","statearr-9296","inst_9216","statearr-9297","inst_9214","statearr-9298","statearr-9299","inst_9229","inst_9230","inst_9231","inst_9232","inst_9233","statearr-9300","statearr-9301","inst_9258","inst_9259","inst_9260","statearr-9302","inst_9240","statearr-9303","statearr-9304","statearr-9305","statearr-9306","inst_9211","statearr-9307","statearr-9308","e9309","statearr-9310","statearr-9311","statearr-9312","cljs.core.pr_str","cljs.reader.read_string","cljs.core.async/close!","js/chess","js/chess.engine","js/chess.engine.worker-engine","js/chess.engine.worker-engine.work-chan","chess.engine.worker-engine/work-chan","js/chess.engine.worker-engine.worker-chan-chan","chess.engine.worker-engine/worker-chan-chan","js/chess.engine.worker-engine._","chess.engine.worker-engine/_","seq__9313","chunk__9314","count__9315","i__9316","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/next","i","cljs.core.range","state_9346","state_val_9347","inst_9341","inst_9342","inst_9344","statearr-9348","e9349","statearr-9350","statearr-9351","statearr-9352","state_9358","state_val_9359","inst_9353","inst_9354","inst_9356","statearr-9360","e9361","statearr-9362","statearr-9363","statearr-9364","chess.utils/asset-path","state_9432","state_val_9433","statearr-9434","inst_9411","statearr-9435","inst_9425","statearr-9436","statearr-9437","inst_9395","inst_9403","inst_9404","inst_9405","inst_9406","inst_9407","statearr-9438","statearr-9439","inst_9416","statearr-9440","inst_9400","inst_9401","statearr-9441","statearr-9442","statearr-9443","statearr-9444","inst_9427","inst_9396","statearr-9445","statearr-9446","inst_9414","statearr-9447","statearr-9448","inst_9369","inst_9374","inst_9375","inst_9376","inst_9377","inst_9378","statearr-9449","statearr-9450","inst_9394","statearr-9451","statearr-9452","inst_9371","inst_9372","statearr-9453","statearr-9454","statearr-9455","inst_9419","inst_9420","inst_9421","inst_9422","inst_9423","statearr-9456","statearr-9457","inst_9390","inst_9391","inst_9392","statearr-9458","inst_9387","statearr-9459","inst_9385","statearr-9460","statearr-9461","inst_9430","statearr-9462","statearr-9463","statearr-9464","inst_9382","statearr-9465","statearr-9466","e9467","statearr-9468","statearr-9469","statearr-9470","cljs.core.async.pipe","chess.engine.worker-engine/submit-command","worker-chan","form","state_9482","state_val_9483","inst_9471","inst_9472","inst_9473","inst_9474","cljs.core/PersistentHashMap","statearr-9484","inst_9476","statearr-9485","inst_9478","statearr-9486","inst_9480","statearr-9487","statearr-9488","e9489","statearr-9490","statearr-9491","statearr-9492","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","seq9493","self__4724__auto__","x","chess.utils.screen_print","cljs.core/last","chess.engine.worker-engine/dispatch","literal","state_9503","state_val_9504","inst_9494","inst_9495","inst_9496","inst_9497","statearr-9505","inst_9499","statearr-9506","inst_9501","statearr-9507","e9508","statearr-9509","statearr-9510","statearr-9511","chess.engine.worker-engine/worker-engine","js/chess.engine.worker-engine.t_chess$engine$worker_engine9512","chess.engine.worker-engine/t_chess$engine$worker_engine9512","_9514","meta9513","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","chess.engine.worker-engine/->t_chess$engine$worker_engine9512","_","board","move","chess.engine.worker_engine.printl","state_9525","state_val_9526","inst_9516","form9515","cljs.core/Symbol","cljs.core._EQ_","cljs.core.symbol","clojure.walk/postwalk","p1__7087__7088__auto__","cljs.core/seq?","cljs.core/cons","inst_9517","inst_9518","inst_9519","inst_9521","inst_9522","inst_9523","statearr-9527","e9528","statearr-9529","statearr-9530","statearr-9531","color","state_9542","state_val_9543","inst_9533","form9532","inst_9534","inst_9535","inst_9536","inst_9538","inst_9539","inst_9540","statearr-9544","e9545","statearr-9546","statearr-9547","statearr-9548","chess.engine.local-engine/local-engine","cljs.core.map","state_9574","state_val_9575","inst_9565","form9564","inst_9566","inst_9567","inst_9568","inst_9570","inst_9571","inst_9572","statearr-9576","e9577","statearr-9578","statearr-9579","statearr-9580","cljs.core.async.merge","cljs.core.async/reduce","a","b","chess.utils/maxf","cljs.core/second","state_9562","state_val_9563","inst_9549","inst_9550","cljs.core/PersistentVector","inst_9551","inst_9552","inst_9553","inst_9554","inst_9555","inst_9557","inst_9558","inst_9559","inst_9560","statearr-9581","e9582","statearr-9583","statearr-9584","statearr-9585"],"sourcesContent":["(ns chess.engine.worker-engine\n  (:require [\n             chess.engine.core :refer [Engine\n                                       other-color\n                                       apply-move\n                                       possible-moves\n                                       best-move]]\n            [clojure.core.async :as async :refer [go go-loop >! <! chan close!]]\n            [chess.engine.local-engine :refer [local-engine]]\n            [cljs.reader :refer [read-string]]\n            [clojure.walk :as walk]\n            [chess.utils :refer [screen-print zip match plusminus maxf literalize asset-path]]))\n\n(declare submit-command\n         printl)\n\n(defn load-worker [filename id]\n  \"loads the worker by filename. usage:\n  (let [c (chan)]\n    (>! (load-worker fname) {:rc c :form query})\n    (prn 'got response: ' (<! c)))\"\n  (let [c (chan 1)\n        reply-chan (chan 1)\n        worker (js/Worker. filename)]\n    (aset worker \"onmessage\" (fn [^js e] (->> e\n                                                         (.-data)\n                                                         (printl)\n                                                         (>! reply-chan)\n                                                         (go))))\n    (go-loop [{:keys [rc form]} (<! c)]\n             (if (not (nil? form))\n               (do\n                 (printl \"worker \" id \" starting work\")\n                 (.postMessage worker (pr-str form))\n                 (>! rc (read-string (<! reply-chan)))\n                 (printl \"worker \" id \" finished work\")\n                 (close! rc)\n                 (recur (<! c)))))\n    c))\n\n; 'work' the form {:rc (response channel) :form (form to be executed)}\n(defonce work-chan (chan 30))\n(defonce worker-chan-chan (chan 30))\n(defonce _ (do\n             ; initially load 4 workers\n             (doseq [i (range 4)]\n               (go (>! worker-chan-chan (load-worker (asset-path \"/js/worker.js\") i))))\n\n             ; do the recurrent loop to submit work\n             (go-loop [{:keys [rc form]} (<! work-chan)\n                       worker-chan (<! worker-chan-chan)]\n                      (async/pipe (submit-command worker-chan form) rc)\n                      (recur (<! work-chan) (<! worker-chan-chan)))))\n\n(defn submit-command [worker-chan form]\n  (go (let [rc (chan 1)]; need to have buffer because it will get locked.. I think\n        (>! worker-chan\n            {:rc rc :form form}); rc get's closed by the go loop in load-worker\n        (let [resp (<! rc)]\n          (>! worker-chan-chan worker-chan)\n          resp))))\n\n(defn printl [& x]\n  (screen-print \"printl: \" x)\n  (last x))\n\n(defn dispatch [literal]\n  (go (let [rc (chan 1)]\n        (>! work-chan {:rc rc :form literal})\n        (<! rc))))\n\n(def worker-engine\n    (reify Engine\n      (apply-move [_ board move] (->> (literalize [board move]\n                                                       (require '[chess.engine.core :refer [Engine apply-move possible-moves best-move]]\n                                                                '[chess.engine.local-engine :refer [local-engine]])\n                                                       (apply-move local-engine board move))\n                                           (dispatch)\n                                           (<!)\n                                           (:value)\n                                           (printl)\n                                           (go)))\n\n      (possible-moves [_ board color] (->> (literalize [board color]\n                                                       (require '[chess.engine.core :refer [Engine apply-move possible-moves best-move]]\n                                                                '[chess.engine.local-engine :refer [local-engine]])\n                                                       (possible-moves local-engine board color))\n                                           (dispatch)\n                                           (<!)\n                                           (:value)\n                                           (printl)\n                                           (go)))\n      \n      (best-move [_ board color]\n        (->> (possible-moves local-engine board color)\n             (map (fn [move] (->> (literalize [board move]\n                                              (require '[chess.engine.local-engine :refer [move-value]])\n                                              [move (move-value board move 2)])\n                                  (dispatch)\n                                  (<!)\n                                  (:value)\n                                  (printl)\n                                  (go))))\n             (async/merge)\n             (async/reduce (fn [a b] (cons b a)) [])\n             (<!)\n             (maxf second)\n             (printl \"final result\")\n             (first)\n             (go)))))\n"]}