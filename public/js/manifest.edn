[{:module-id :shared, :name :shared, :output-name "shared.js", :entries [shadow.cljs.devtools.client.console shadow.cljs.bootstrap.browser cljs.js], :depends-on nil, :sources ["goog/base.js" "goog/debug/error.js" "goog/dom/nodetype.js" "goog/asserts/asserts.js" "goog/reflect/reflect.js" "goog/math/long.js" "goog/math/integer.js" "goog/dom/asserts.js" "goog/functions/functions.js" "goog/array/array.js" "goog/dom/htmlelement.js" "goog/dom/tagname.js" "goog/object/object.js" "goog/dom/tags.js" "goog/html/trustedtypes.js" "goog/string/typedstring.js" "goog/string/const.js" "goog/html/safescript.js" "goog/fs/url.js" "goog/i18n/bidi.js" "goog/html/trustedresourceurl.js" "goog/string/internal.js" "goog/html/safeurl.js" "goog/html/safestyle.js" "goog/html/safestylesheet.js" "goog/labs/useragent/util.js" "goog/labs/useragent/browser.js" "goog/html/safehtml.js" "goog/html/uncheckedconversions.js" "goog/dom/safe.js" "goog/string/string.js" "goog/structs/structs.js" "goog/math/math.js" "goog/iter/iter.js" "goog/structs/map.js" "goog/uri/utils.js" "goog/uri/uri.js" "goog/string/stringbuffer.js" "cljs/core.cljs" "clojure/string.cljs" "shadow/cljs/devtools/client/console.cljs" "clojure/set.cljs" "clojure/walk.cljs" "cljs/env.cljc" "cljs/spec/gen/alpha.cljs" "cljs/spec/alpha.cljs" "cljs/tools/reader/impl/utils.cljs" "cljs/tools/reader/reader_types.cljs" "cljs/tools/reader/impl/inspect.cljs" "cljs/tools/reader/impl/errors.cljs" "cljs/tools/reader/impl/commons.cljs" "cljs/tools/reader.cljs" "cljs/tools/reader/edn.cljs" "cljs/reader.cljs" "cljs/tagged_literals.cljc" "cljs/analyzer.cljc" "cljs/source_map/base64.cljs" "cljs/source_map/base64_vlq.cljs" "cljs/source_map.cljs" "cljs/compiler.cljc" "goog/crypt/crypt.js" "goog/labs/useragent/engine.js" "goog/labs/useragent/platform.js" "goog/useragent/useragent.js" "goog/useragent/product.js" "goog/crypt/base64.js" "cljs/js.cljs" "com/cognitect/transit/util.js" "com/cognitect/transit/delimiters.js" "com/cognitect/transit/caching.js" "com/cognitect/transit/eq.js" "com/cognitect/transit/types.js" "com/cognitect/transit/impl/decoder.js" "com/cognitect/transit/impl/reader.js" "com/cognitect/transit/handlers.js" "com/cognitect/transit/impl/writer.js" "com/cognitect/transit.js" "cognitect/transit.cljs" "shadow/js.js" "shadow/cljs/bootstrap/env.cljs" "goog/async/freelist.js" "goog/async/workqueue.js" "goog/debug/entrypointregistry.js" "goog/dom/browserfeature.js" "goog/math/coordinate.js" "goog/math/size.js" "goog/dom/dom.js" "goog/async/nexttick.js" "goog/async/run.js" "goog/promise/thenable.js" "goog/promise/resolver.js" "goog/promise/promise.js" "goog/disposable/idisposable.js" "goog/disposable/disposable.js" "goog/debug/errorcontext.js" "goog/debug/debug.js" "goog/events/browserfeature.js" "goog/events/eventid.js" "goog/events/event.js" "goog/events/eventtype.js" "goog/events/browserevent.js" "goog/events/listenable.js" "goog/events/listener.js" "goog/events/listenermap.js" "goog/events/events.js" "goog/events/eventtarget.js" "goog/timer/timer.js" "goog/json/json.js" "goog/json/hybrid.js" "goog/debug/logrecord.js" "goog/debug/logbuffer.js" "goog/debug/logger.js" "goog/log/log.js" "goog/net/errorcode.js" "goog/net/eventtype.js" "goog/net/httpstatus.js" "goog/net/xhrlike.js" "goog/net/xmlhttpfactory.js" "goog/net/wrapperxmlhttpfactory.js" "goog/net/xmlhttp.js" "goog/net/xhrio.js" "goog/events/eventhandler.js" "goog/net/bulkloaderhelper.js" "goog/net/bulkloader.js" "shadow/cljs/bootstrap/browser.cljs" "html_cljs/html.cljs" "chess/utils.cljs" "html_cljs/hooks.cljs" "chess/engine/core.cljs" "chess/engine/local_engine.cljs" "cljs/core/async/impl/protocols.cljs" "cljs/core/async/impl/buffers.cljs" "cljs/core/async/impl/dispatch.cljs" "cljs/core/async/impl/channels.cljs" "cljs/core/async/impl/timers.cljs" "cljs/core/async/impl/ioc_helpers.cljs" "cljs/core/async.cljs" "shadow/module/shared/append.js"]} {:module-id :main, :name :main, :output-name "main.js", :entries [chess.core], :depends-on #{:shared}, :sources ["chess/components/square.cljs" "chess/components/board.cljs" "chess/engine/worker_engine.cljs" "chess/engine/hook.cljs" "chess/core.cljs" "shadow/module/main/append.js"]} {:module-id :worker, :name :worker, :output-name "worker.js", :entries [chess.worker], :depends-on #{:shared}, :sources ["chess/worker.cljs" "shadow/module/worker/append.js"]}]