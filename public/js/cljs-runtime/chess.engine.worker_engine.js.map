{"version":3,"sources":["chess/engine/worker_engine.cljs"],"mappings":"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","names":["var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","chess.engine.worker-engine/submit-command","seq37330","G__37331","cljs.core/first","cljs.core/next","G__37332","self__4776__auto__","worker-chan","cmd","args","c__26769__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__26770__auto__","switch__26731__auto__","state_37345","state_val_37346","inst_37333","inst_37334","cljs.core/PersistentVector","inst_37335","inst_37336","inst_37337","cljs.core/PersistentHashMap","inst_37338","inst_37339","statearr-37347","cljs.core.async.impl.ioc-helpers/put!","inst_37341","statearr-37348","cljs.core.async.impl.ioc-helpers/take!","inst_37343","cljs.core.async.impl.ioc-helpers/return-chan","statearr-37349","state-machine__26732__auto__","ret-value__26733__auto__","result__26734__auto__","cljs.core/keyword-identical?","e37350","js/Object","ex__26735__auto__","statearr-37351","cljs.core.async.impl.ioc-helpers/process-exception","state__26771__auto__","statearr-37352","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","chess.engine.worker-engine/printl","x","cljs.core.prn","chess.engine.worker-engine/worker-engine","c","chess.utils/load-worker","js/chess","js/chess.engine","js/chess.engine.worker-engine","js/chess.engine.worker-engine.t_chess$engine$worker_engine37353","chess.engine.worker-engine/t_chess$engine$worker_engine37353","_37355","meta37354","cljs.core/PROTOCOL_SENTINEL","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","chess.engine.worker-engine/->t_chess$engine$worker_engine37353","_","board","move","state_37361","state_val_37362","inst_37356","inst_37358","inst_37359","statearr-37363","statearr-37364","e37365","statearr-37366","statearr-37367","chess.engine.worker_engine.submit_command","color","state_37372","state_val_37373","inst_37368","inst_37370","statearr-37374","e37375","statearr-37376","statearr-37377","state_37383","state_val_37384","inst_37378","inst_37380","inst_37381","statearr-37385","e37386","statearr-37387","statearr-37388"],"sourcesContent":["(ns chess.engine.worker-engine\n  (:require [chess.engine.core :refer [Engine\n                                       other-color\n                                       apply-move\n                                       possible-moves\n                                       best-move]]\n            [clojure.core.async :refer [go go-loop >! <! chan close!]]\n            [chess.utils :refer [zip match plusminus maxf load-worker]]))\n\n(defn submit-command [worker-chan cmd & args]\n  (go (let [rc (chan 10)]; need to have buffer because it will get locked.. I think\n        (>! worker-chan\n            [{:cmd cmd\n              :args args}\n             rc])\n        (<! rc))))\n\n(defn printl [x]\n  (prn \"printl: \" x)\n  x)\n\n(def worker-engine\n  (let [c (load-worker \"/js/worker.js\")]\n    (prn \"loaded worker, theoretically\")\n    (reify Engine\n      (apply-move [_ board move] (go (let [r (<! (submit-command c :apply-move board move))]\n                                       (prn \"move response: \" r)\n                                       r)))\n\n      (possible-moves [_ board color] (go (<! (submit-command c :possible-moves board color))))\n      \n      (best-move [_ board color] (go (printl (<! (submit-command c :best-move board color))))))))\n"]}