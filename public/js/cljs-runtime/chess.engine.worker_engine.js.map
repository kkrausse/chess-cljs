{"version":3,"sources":["chess/engine/worker_engine.cljs"],"mappings":"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","names":["chess.engine.worker-engine/load-worker","filename","id","c","cljs.core.async.chan","reply-chan","worker","js/Worker","e","chess.engine.worker-engine/printl","c__7471__auto__","cljs.core.async.impl.dispatch/run","f__7472__auto__","switch__7406__auto__","state_7902","state_val_7904","inst_7891","inst_7892","cljs.core.async.impl.ioc-helpers/put!","inst_7896","cljs.core.async.impl.ioc-helpers/return-chan","statearr-7907","state-machine__7407__auto__","ret-value__7408__auto__","result__7409__auto__","cljs.core/keyword-identical?","e7910","js/Object","ex__7410__auto__","statearr-7912","cljs.core.async.impl.ioc-helpers/process-exception","state__7473__auto__","statearr-7914","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","state_8009","state_val_8010","statearr-8018","inst_7955","inst_7977","cljs.core.apply","cljs.core/hash-map","statearr-8020","inst_7981","inst_7991","inst_7992","cljs.core.async.impl.ioc-helpers/take!","statearr-8024","statearr-8026","statearr-8028","statearr-8030","inst_8005","inst_7982","inst_7980","cljs.core.get","inst_7984","inst_7985","statearr-8039","statearr-8040","statearr-8041","statearr-8043","inst_7999","statearr-8046","statearr-8048","inst_8003","statearr-8052","statearr-8053","inst_7919","inst_7935","inst_7936","inst_7937","inst_7938","cljs.core/PROTOCOL_SENTINEL","inst_7939","statearr-8055","statearr-8056","inst_7959","inst_7960","cljs.core/not","statearr-8057","statearr-8058","inst_7931","inst_7932","statearr-8060","statearr-8061","statearr-8062","inst_7987","inst_7988","inst_7989","statearr-8063","inst_7971","statearr-8065","inst_7951","inst_7952","inst_7953","statearr-8067","statearr-8068","inst_7948","statearr-8069","inst_7946","statearr-8070","statearr-8071","inst_7963","inst_7964","inst_7965","inst_7966","inst_7967","statearr-8074","statearr-8075","inst_7994","inst_7995","inst_7996","statearr-8076","inst_7974","statearr-8077","statearr-8078","statearr-8079","statearr-8080","inst_7943","statearr-8082","statearr-8085","e8086","statearr-8087","statearr-8089","cljs.core.pr_str","cljs.reader.read_string","cljs.core.async/close!","js/chess","js/chess.engine","js/chess.engine.worker-engine","js/chess.engine.worker-engine.work-chan","chess.engine.worker-engine/work-chan","js/chess.engine.worker-engine.worker-chan-chan","chess.engine.worker-engine/worker-chan-chan","js/chess.engine.worker-engine._","chess.engine.worker-engine/_","seq__8093","cljs.core/seq","chunk__8094","count__8095","i__8096","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","i","cljs.core.range","state_8124","state_val_8125","inst_8119","inst_8120","inst_8122","statearr-8126","e8127","statearr-8128","statearr-8129","state_8135","state_val_8136","inst_8130","inst_8131","inst_8133","statearr-8137","e8138","statearr-8139","statearr-8140","chess.utils/asset-path","state_8208","state_val_8209","statearr-8210","inst_8187","statearr-8211","inst_8201","statearr-8212","statearr-8213","inst_8171","inst_8179","inst_8180","inst_8181","inst_8182","inst_8183","statearr-8214","statearr-8215","inst_8192","statearr-8216","inst_8176","inst_8177","statearr-8217","statearr-8218","statearr-8219","statearr-8220","inst_8203","inst_8172","statearr-8221","statearr-8222","inst_8190","statearr-8223","statearr-8224","inst_8145","inst_8150","inst_8151","inst_8152","inst_8153","inst_8154","statearr-8225","statearr-8226","inst_8170","statearr-8227","statearr-8228","inst_8147","inst_8148","statearr-8229","statearr-8230","statearr-8231","inst_8195","inst_8196","inst_8197","inst_8198","inst_8199","statearr-8232","statearr-8233","inst_8166","inst_8167","inst_8168","statearr-8234","inst_8163","statearr-8235","inst_8161","statearr-8236","statearr-8237","inst_8206","statearr-8238","statearr-8239","statearr-8240","inst_8158","statearr-8241","statearr-8242","e8243","statearr-8244","statearr-8245","cljs.core.async.pipe","chess.engine.worker-engine/submit-command","worker-chan","form","state_8257","state_val_8258","inst_8246","inst_8247","inst_8248","inst_8249","cljs.core/PersistentHashMap","statearr-8259","inst_8251","statearr-8260","inst_8253","statearr-8261","inst_8255","statearr-8262","statearr-8263","e8264","statearr-8265","statearr-8266","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","seq8267","self__4777__auto__","x","chess.utils.screen_print","cljs.core/last","chess.engine.worker-engine/dispatch","literal","state_8277","state_val_8278","inst_8268","inst_8269","inst_8270","inst_8271","statearr-8279","inst_8273","statearr-8280","inst_8275","statearr-8281","e8282","statearr-8283","statearr-8284","chess.engine.worker-engine/worker-engine","js/chess.engine.worker-engine.t_chess$engine$worker_engine8285","chess.engine.worker-engine/t_chess$engine$worker_engine8285","_8287","meta8286","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","chess.engine.worker-engine/->t_chess$engine$worker_engine8285","_","board","move","chess.engine.worker_engine.printl","state_8298","state_val_8299","inst_8289","form8288","cljs.core/Symbol","cljs.core._EQ_","cljs.core.symbol","clojure.walk/postwalk","p1__6103__6104__auto__","cljs.core/seq?","cljs.core/cons","inst_8290","inst_8291","inst_8292","inst_8294","inst_8295","inst_8296","statearr-8300","e8301","statearr-8302","statearr-8303","color","state_8314","state_val_8315","inst_8305","form8304","inst_8306","inst_8307","inst_8308","inst_8310","inst_8311","inst_8312","statearr-8316","e8317","statearr-8318","statearr-8319","chess.engine.local-engine/local-engine","cljs.core.map","state_8345","state_val_8346","inst_8336","form8335","inst_8337","inst_8338","inst_8339","inst_8341","inst_8342","inst_8343","statearr-8347","e8348","statearr-8349","statearr-8350","cljs.core.async.merge","cljs.core.async/reduce","a","b","chess.utils/maxf","cljs.core/second","state_8333","state_val_8334","inst_8320","inst_8321","cljs.core/PersistentVector","inst_8322","inst_8323","inst_8324","inst_8325","inst_8326","inst_8328","inst_8329","inst_8330","inst_8331","statearr-8351","e8352","statearr-8353","statearr-8354"],"sourcesContent":["(ns chess.engine.worker-engine\n  (:require [\n             chess.engine.core :refer [Engine\n                                       other-color\n                                       apply-move\n                                       possible-moves\n                                       best-move]]\n            [clojure.core.async :as async :refer [go go-loop >! <! chan close!]]\n            [chess.engine.local-engine :refer [local-engine]]\n            [cljs.reader :refer [read-string]]\n            [clojure.walk :as walk]\n            [chess.utils :refer [screen-print zip match plusminus maxf literalize asset-path]]))\n\n(declare submit-command\n         printl)\n\n(defn load-worker [filename id]\n  \"loads the worker by filename. usage:\n  (let [c (chan)]\n    (>! (load-worker fname) {:rc c :form query})\n    (prn 'got response: ' (<! c)))\"\n  (let [c (chan 1)\n        reply-chan (chan 1)\n        worker (js/Worker. filename)]\n    (aset worker \"onmessage\" (fn [^js e] (->> e\n                                                         (.-data)\n                                                         (printl)\n                                                         (>! reply-chan)\n                                                         (go))))\n    (go-loop [{:keys [rc form]} (<! c)]\n             (if (not (nil? form))\n               (do\n                 (printl \"worker \" id \" starting work\")\n                 (.postMessage worker (pr-str form))\n                 (>! rc (read-string (<! reply-chan)))\n                 (printl \"worker \" id \" finished work\")\n                 (close! rc)\n                 (recur (<! c)))))\n    c))\n\n; 'work' the form {:rc (response channel) :form (form to be executed)}\n(defonce work-chan (chan 30))\n(defonce worker-chan-chan (chan 30))\n(defonce _ (do\n             ; initially load 4 workers\n             (doseq [i (range 4)]\n               (go (>! worker-chan-chan (load-worker (asset-path \"/js/worker.js\") i))))\n\n             ; do the recurrent loop to submit work\n             (go-loop [{:keys [rc form]} (<! work-chan)\n                       worker-chan (<! worker-chan-chan)]\n                      (async/pipe (submit-command worker-chan form) rc)\n                      (recur (<! work-chan) (<! worker-chan-chan)))))\n\n(defn submit-command [worker-chan form]\n  (go (let [rc (chan 1)]; need to have buffer because it will get locked.. I think\n        (>! worker-chan\n            {:rc rc :form form}); rc get's closed by the go loop in load-worker\n        (let [resp (<! rc)]\n          (>! worker-chan-chan worker-chan)\n          resp))))\n\n(defn printl [& x]\n  (screen-print \"printl: \" x)\n  (last x))\n\n(defn dispatch [literal]\n  (go (let [rc (chan 1)]\n        (>! work-chan {:rc rc :form literal})\n        (<! rc))))\n\n(def worker-engine\n    (reify Engine\n      (apply-move [_ board move] (->> (literalize [board move]\n                                                       (require '[chess.engine.core :refer [Engine apply-move possible-moves best-move]]\n                                                                '[chess.engine.local-engine :refer [local-engine]])\n                                                       (apply-move local-engine board move))\n                                           (dispatch)\n                                           (<!)\n                                           (:value)\n                                           (printl)\n                                           (go)))\n\n      (possible-moves [_ board color] (->> (literalize [board color]\n                                                       (require '[chess.engine.core :refer [Engine apply-move possible-moves best-move]]\n                                                                '[chess.engine.local-engine :refer [local-engine]])\n                                                       (possible-moves local-engine board color))\n                                           (dispatch)\n                                           (<!)\n                                           (:value)\n                                           (printl)\n                                           (go)))\n      \n      (best-move [_ board color]\n        (->> (possible-moves local-engine board color)\n             (map (fn [move] (->> (literalize [board move]\n                                              (require '[chess.engine.local-engine :refer [move-value]])\n                                              [move (move-value board move 2)])\n                                  (dispatch)\n                                  (<!)\n                                  (:value)\n                                  (printl)\n                                  (go))))\n             (async/merge)\n             (async/reduce (fn [a b] (cons b a)) [])\n             (<!)\n             (maxf second)\n             (printl \"final result\")\n             (first)\n             (go)))))\n"]}