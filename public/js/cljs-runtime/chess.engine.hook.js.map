{"version":3,"sources":["chess/engine/hook.cljs"],"mappings":";;;;;;;AAWA,AAAA,AAAMA,AAAYC;AAAlB,AAAA;AAKE,AAAMC,AAAM,AAACC,AAAKF;AACZG,AAAM,AAACD,AAAKE;AACZC,AAAM,AAACH,AAAK,AAAgBI,AAAaF,AAAWJ;AAF1D,AAGE,AAAKQ;AAAL,AAAA,AAAA,AAAAD,AAAA,AAAAA,AACIJ,AACAE,AACD,AAAKI;AAAL,AACE,AAAMC,AAAS,AAAA,AAAAH,AAAYD,AAAcH,AAAMM;AAA/C,AACE,AAACE,AAAOV,AAAM,AAACW,AAAYZ;;AAC3B,AAACW,AAAOR,AAAMO;;AACd,AAAA,AAACC,AAAON;;AACR,AAACQ,AAAaL;;AAEd,AAAA,AAACM;;AACD,AAACC,AACC;AAAA,AACE,AAACJ,AAAOR,AAAM,AAAYG,AAAaI,AACb,AAAWJ,AAAaI,AAAS,AAACE,AAAYZ;;AACxE,AAACW,AAAON,AAAM,AAAA,AAAAE,AAAgBD,AAAcH,AAAMH;;AAClD,AAACW,AAAOV,AAAMD;;AACd,AAACa,AAAaL;AANlB;;;;AASX,AAAA,AAAMQ,AAAkBhB;AAAxB,AAAA;AAGE,AAAMC,AAAM,AAACC,AAAKF;AACZG,AAAM,AAACD,AAAKE;AACZC,AAAM,AAAA,AAACH;AACPe,AAAQ,AAAA,AAACf;AAHf,AAIE,AAAKM;AAAL,AAEE,AAAA,AAAAD,AAAKU;AACH,AAAAC,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAyCsB,AAAc3C,AAAWJ;AAAlEuB,AAAAA;AAAA,AAAA,AAAAG,AAAAH,AAAA,AAAAE;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAAG,AAAA,AAAAJ,AAAA;AAAAK,AAAA,AAAAD,AACOhB,AAAON;AADdwB,AAAA,AAAA,AAEOlB,AAAOM;AAFda,AAAA,AAGOjB,AAAaL;AAHpBe,AAAA,AAAAQ,AAAAR;AAAA,AAAA,AAAAQ,AAAA,AAAAH;;AAAA,AAAAG,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAAC,AAAAT,AAAAO;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC;;AAAA,AAAAD,AAAA,AAAA;;AAAAA;;AAAAV;;AAAA,AAAA,AAAAY,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAd,AAAAC;AAAA,AAAA,AAAA,AAAAc,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAA,AAAAE,AAAAC;AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAAG,AAAAlB;AAAA,AAAA,AAAAkB,AAAA,AAAAD;;AAAAC;AAAA,AAAAC,AAAAnB;;AAAA;;AAAA,AAAA,AAAAe;;;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAZ;;;;AAAAY;;;;;AAAAZ;;;;;AAAAA;;;;;;;;;AAAAoB,AAAA,AAAAC,AAAA,AAAAvB;AAAA,AAAA,AAAAuB,AAAAC,AAAA,AAAA3B;;AAAA0B;;AAAA,AAAA,AAAAE,AAAAH;;;AAAAzB;AADF;;AAFF,AAAA,AAAAX,AAAA,AAAAA,AAOIJ,AACAE,AACD,AAAKI;AAAL,AACE,AAAAS,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA0B;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA3C,AACgDJ;AADhDgD,AAAA,AAAAD,AACiCH,AAAqBtC;AADtDuC,AAAAA;AAAA,AAAA,AAAAtB,AAAAsB,AAAA,AAAAG;;AAAA,AAAA,AAAAF,AAAA;AAAA,AAAAG,AAAA,AAAAJ,AAAA;AAAAI,AAAA,AAAAJ,AAAA;AAAAK,AAAA,AAEmBzC,AAAYZ;AAF/BsD,AAAA,AAAAD,AAEK1C,AAAOV;AAFZsD,AAAA,AAAAH,AAGKzC,AAAOR;AAHZqD,AAAA,AAAAC;AAAAC,AAAA,AAAAF,AAIK7C,AAAON;AAJZsD,AAAA,AAKK9C,AAAaL;AALlBoD,AAAA,AAOqEhD,AAAYZ;AAPjF6D,AAAA,AAAAT,AAAAQ,AAO6Cb;AAP7CC,AAAA,AAAAc,AAAAd;AAAA,AAAA,AAAAc,AAAA,AAAAP;;AAAA,AAAAO,AAAA,AAAAH;;AAAA,AAAAG,AAAA,AAAAJ;;AAAA,AAAAI,AAAA,AAAAR;;AAAA,AAAAQ,AAAA,AAAAV;;AAAAU;;AAAA,AAAA,AAAApC,AAAAsB,AAAA,AAAAa;;AAAA,AAAA,AAAAZ,AAAA;AAAA,AAAAc,AAAA,AAAAf,AAAA;AAAAgB,AAAA,AAAAD,AAMKpD,AAAOR;AANZ8D,AAAA,AAAA1D,AAQqDJ;AARrD+D,AAAA,AAAAD,AAQsClB,AAAqB/C;AAR3DgD,AAAA,AAAAmB,AAAAnB;AAAA,AAAA,AAAAmB,AAAA,AAAAH;;AAAAG;;AAAA,AAAA,AAAAzC,AAAAsB,AAAA,AAAAkB;;AAAA,AAAA,AAAAjB,AAAA;AAAA,AAAAG,AAAA,AAAAJ,AAAA;AAAAoB,AAAA,AAAApB,AAAA;AAAAqB,AAAA,AAAAjB,AAAAgB,AAMkCrB;AANlCC,AAAAA;AAAA,AAAA,AAAAtB,AAAAsB,AAAA,AAAAqB;;AAAA,AAAA,AAAApB,AAAA;AAAA,AAAAqB,AAAA,AAAAtB,AAAA;AAAAuB,AAAA,AAAAD,AAQK3D,AAAON;AARZmE,AAAA,AASK7D,AAAOV,AAAMD;AATlByE,AAAA,AAUK5D,AAAaL;AAVlBwC,AAAA,AAAA0B,AAAA1B;AAAA,AAAA,AAAA0B,AAAA,AAAAH;;AAAA,AAAAG,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAA1C,AAAAgB,AAAAyB;;AAAA;;;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAzC;;AAAA,AAAAyC,AAAA,AAAA;;AAAAA;;AAAA3B;;AAAA,AAAA,AAAAb,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAd,AAAA0B;AAAA,AAAA,AAAA,AAAAX,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAA,AAAAwC,AAAArC;AAAA,AAAAC,AAAAoC;AAAA,AAAA,AAAAC,AAAA7B;AAAA,AAAA,AAAA6B,AAAA,AAAArC;;AAAAqC;AAAA,AAAAnC,AAAAM;;AAAA;;AAAA,AAAA,AAAA4B;;;;AAAA,AAAA,AAAA,AAAAvC,AAAAF,AAAA;AAAA,AAAAa;;;;AAAAb;;;;;AAAAa;;;;;AAAAA;;;;;;;;;AAAAL,AAAA,AAAAmC,AAAA,AAAAzD;AAAA,AAAA,AAAAyD,AAAAjC,AAAA,AAAA3B;;AAAA4D;;AAAA,AAAA,AAAAhC,AAAAH;;;AAAAzB","names":["chess.engine.hook/use-engine","my-color","color","cljs.core.atom","board","chess.engine.core/init-board","moves","chess.engine.local-engine/local-engine","cljs.core/deref","vdom-state","move","my-board","cljs.core/reset!","chess.engine.core/other-color","html_cljs.html.refresh","cljs.core.prn","js/setTimeout","chess.engine.hook/use-async-engine","initial","c__27116__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__27117__auto__","switch__27093__auto__","state_42262","state_val_42263","inst_42255","cljs.core.async.impl.ioc-helpers/take!","inst_42257","inst_42258","inst_42259","inst_42260","statearr-42269","cljs.core.async.impl.ioc-helpers/return-chan","statearr-42271","state-machine__27094__auto__","ret-value__27095__auto__","result__27096__auto__","cljs.core/keyword-identical?","e42273","js/Object","ex__27097__auto__","statearr-42274","cljs.core.async.impl.ioc-helpers/process-exception","state__27118__auto__","statearr-42279","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","chess.engine.worker-engine/worker-engine","state_42308","state_val_42309","inst_42282","inst_42283","inst_42285","inst_42286","inst_42287","inst_42288","inst_42289","cljs.core/PersistentVector","inst_42290","inst_42291","inst_42292","inst_42293","statearr-42319","inst_42298","inst_42299","inst_42300","inst_42301","statearr-42326","inst_42295","inst_42296","inst_42303","inst_42304","inst_42305","inst_42306","statearr-42327","statearr-42329","e42331","statearr-42332","statearr-42338"],"sourcesContent":["(ns chess.engine.hook\n  (:require [chess.engine.core :refer [init-board\n                                       other-color\n                                       apply-move\n                                       possible-moves\n                                       best-move]]\n            [chess.engine.local-engine :refer [local-engine]]\n            [chess.engine.worker-engine :refer [worker-engine]]\n            [html-cljs.html :as html]\n            [clojure.core.async :refer [go >! <! chan]]))\n\n(defn use-engine [my-color]\n  \"all the pure logic and serves as the gateway to the UI\n  returns: [board moves on-move]\n    board - the current board\n    moves - the player's available moves\"\n  (let [color (atom my-color)\n        board (atom init-board)\n        moves (atom (possible-moves local-engine init-board my-color))]\n    (fn [vdom-state]\n      [@board\n       @moves\n       (fn [move]\n         (let [my-board (apply-move local-engine @board move)]\n           (reset! color (other-color my-color))\n           (reset! board my-board)\n           (reset! moves [])\n           (html/refresh vdom-state)\n           ;do the ai stuff asynchronously\n           (prn \"\")\n           (js/setTimeout\n             (fn []\n               (reset! board (apply-move local-engine my-board\n                                         (best-move local-engine my-board (other-color my-color))))\n               (reset! moves (possible-moves local-engine @board my-color))\n               (reset! color my-color)\n               (html/refresh vdom-state))\n             100)))])))\n\n(defn use-async-engine [my-color]\n  \"same as above, but it will return everything on channels (which will\n  already be closed so don't worry about that)\"\n  (let [color (atom my-color)\n        board (atom init-board)\n        moves (atom [])\n        initial (atom true)]\n    (fn [vdom-state]\n      ;initially load moves\n      (if @initial\n        (go (let [init-moves (<! (possible-moves worker-engine init-board my-color))]\n              (reset! moves init-moves)\n              (reset! initial false)\n              (html/refresh vdom-state))))\n      [@board\n       @moves\n       (fn [move]\n         (go\n           (let [my-board (<! (apply-move worker-engine @board move))]\n             (reset! color (other-color my-color))\n             (reset! board my-board)\n             (reset! moves [])\n             (html/refresh vdom-state)\n             (reset! board (<! (apply-move worker-engine my-board\n                                       (<! (best-move worker-engine my-board (other-color my-color))))))\n             (reset! moves (<! (possible-moves worker-engine @board my-color)))\n             (reset! color my-color)\n             (html/refresh vdom-state))))])))\n"]}