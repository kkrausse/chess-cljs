{"version":3,"sources":["chess/worker.cljs"],"mappings":"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","names":["js/chess","js/chess.worker","js/chess.worker.c-state","chess.worker/c-state","cljs.js.empty_state","js/chess.worker.inited","chess.worker/inited","cljs.core.async.chan","js/chess.worker._","chess.worker/_","shadow.cljs.bootstrap.browser/init","c__27116__auto__","cljs.core.async.impl.dispatch/run","f__27117__auto__","switch__27093__auto__","state_30182","state_val_30183","cljs.core.async.impl.ioc-helpers/put!","inst_30179","inst_30180","statearr-30184","cljs.core.async.impl.ioc-helpers/return-chan","statearr-30185","state-machine__27094__auto__","ret-value__27095__auto__","result__27096__auto__","cljs.core/keyword-identical?","e30186","js/Object","ex__27097__auto__","statearr-30187","cljs.core.async.impl.ioc-helpers/process-exception","state__27118__auto__","statearr-30188","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core.async/close!","chess.worker/init-worker","handler","js/self","e","state_30197","state_val_30198","inst_30189","inst_30190","inst_30191","cljs.core.async.impl.ioc-helpers/take!","inst_30193","inst_30194","inst_30195","statearr-30199","e30200","statearr-30201","statearr-30202","js/postMessage","cljs.core.prn_str","cljs.reader.read_string","chess.worker/eval-form","source","c","p1__30203#","cljs.js.eval","cljs.js/js-eval","cljs.core.partial","shadow.cljs.bootstrap.browser/load","cljs.core.symbol","state_30208","state_val_30209","inst_30205","inst_30206","statearr-30210","statearr-30211","e30212","statearr-30213","statearr-30214","chess.worker/pf","thing","cljs.core.prn","chess.worker/init","msg","state_30221","state_val_30222","inst_30216","inst_30217","statearr-30223","inst_30219","statearr-30224","e30225","statearr-30226","statearr-30227"],"sourcesContent":["(ns chess.worker\n  (:require\n    ;eval stuff\n    [cljs.js :as cljs]\n    [shadow.cljs.bootstrap.browser :as boot]\n   ; engine stuff. no longer required, really \n   [chess.engine.core :refer [Engine\n                              other-color\n                              apply-move\n                              possible-moves\n                              best-move]]\n   [chess.engine.local-engine :refer [local-engine]]\n   [clojure.core.async :refer [go go-loop >! <! chan close!]]\n   [chess.utils :refer [match]]\n   [cljs.reader :refer [read-string]]))\n\n;; Set up eval environment\n\n(defonce c-state (cljs/empty-state))\n\n(defonce inited (chan 1))\n\n(defonce _\n         (boot/init c-state\n                    {:path \"/js/bootstrap\"}\n                    (fn []\n                      (go (>! inited true) (close! inited)))))\n\n(defn init-worker [handler]\n  \"handler is a function that returns something on a channel always\"\n  ;FIXME refactor this thing to thread it (i.e. (-> e ...)\n  \n  (aset js/self \"onmessage\" (fn [^js e] (go (js/postMessage (prn-str (<! (handler (read-string (.-data e))))))))))\n\n(defn eval-form [source]\n  (let [c (chan 1)]\n    (cljs/eval\n      c-state\n      source\n      {:eval cljs/js-eval\n       :load (partial boot/load c-state)\n       :ns (symbol \"chess.user\")}\n      #(go \n         (>! c %)\n         (close! c)))\n    c))\n\n(defn pf [thing]\n  (prn thing)\n  thing)\n\n(defn init []\n  (init-worker\n    (fn [msg]\n      (go\n        (<! inited)\n        (<! (eval-form msg))))))\n"]}