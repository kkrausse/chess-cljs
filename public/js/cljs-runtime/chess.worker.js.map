{"version":3,"sources":["chess/worker.cljs"],"mappings":"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","names":["js/chess","js/chess.worker","js/chess.worker.c-state","chess.worker/c-state","cljs.js.empty_state","js/chess.worker.inited","chess.worker/inited","cljs.core.async.chan","js/chess.worker._","chess.worker/_","shadow.cljs.bootstrap.browser/init","chess.utils/asset-path","c__7471__auto__","cljs.core.async.impl.dispatch/run","f__7472__auto__","switch__7406__auto__","state_7901","state_val_7903","cljs.core.async.impl.ioc-helpers/put!","inst_7890","inst_7893","statearr-7905","cljs.core.async.impl.ioc-helpers/return-chan","statearr-7906","state-machine__7407__auto__","ret-value__7408__auto__","result__7409__auto__","cljs.core/keyword-identical?","e7909","js/Object","ex__7410__auto__","statearr-7911","cljs.core.async.impl.ioc-helpers/process-exception","state__7473__auto__","statearr-7913","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core.async/close!","chess.worker/init-worker","handler","js/self","e","state_7928","state_val_7929","inst_7920","inst_7921","inst_7922","cljs.core.async.impl.ioc-helpers/take!","inst_7924","inst_7925","inst_7926","statearr-7962","e7976","statearr-7983","statearr-7997","js/postMessage","cljs.core.prn_str","cljs.reader.read_string","chess.worker/eval-form","source","c","p1__8008#","cljs.js.eval","cljs.js/js-eval","cljs.core.partial","shadow.cljs.bootstrap.browser/load","state_8015","state_val_8016","inst_8012","inst_8013","statearr-8019","statearr-8021","e8022","statearr-8023","statearr-8027","chess.worker/pf","thing","cljs.core.prn","chess.worker/init","msg","state_8037","state_val_8038","inst_8032","inst_8033","statearr-8042","inst_8035","statearr-8045","e8047","statearr-8050","statearr-8051"],"sourcesContent":["(ns chess.worker\n  (:require\n    ;eval stuff\n    [cljs.js :as cljs]\n    [shadow.cljs.bootstrap.browser :as boot]\n   ; engine stuff. no longer required, really \n   [chess.engine.core :refer [Engine\n                              other-color\n                              apply-move\n                              possible-moves\n                              best-move]]\n   [chess.engine.local-engine :refer [local-engine]]\n   [clojure.core.async :refer [go go-loop >! <! chan close!]]\n   [chess.utils :refer [match asset-path]]\n   [cljs.reader :refer [read-string]]))\n\n;; Set up eval environment\n\n(defonce c-state (cljs/empty-state))\n\n(defonce inited (chan 1))\n\n(defonce _\n         (boot/init c-state\n                    {:path (asset-path \"/js/bootstrap\")}\n                    (fn []\n                      (go (>! inited true) (close! inited)))))\n\n(defn init-worker [handler]\n  \"handler is a function that returns something on a channel always\"\n  ;FIXME refactor this thing to thread it (i.e. (-> e ...)\n  \n  (aset js/self \"onmessage\" (fn [^js e] (go (js/postMessage (prn-str (<! (handler (read-string (.-data e))))))))))\n\n(defn eval-form [source]\n  (let [c (chan 1)]\n    (cljs/eval\n      c-state\n      source\n      {:eval cljs/js-eval\n       :load (partial boot/load c-state)}\n      #(go \n         (>! c %)\n         (close! c)))\n    c))\n\n(defn pf [thing]\n  (prn thing)\n  thing)\n\n(defn init []\n  (init-worker\n    (fn [msg]\n      (go\n        (<! inited)\n        (<! (eval-form msg))))))\n"]}