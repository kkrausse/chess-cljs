{"version":3,"sources":["chess/components/board.cljs"],"mappings":"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","names":["chess.components.board/find-move","moves","move","vec__7450","cljs.core.nth","mfrom","mto","cljs.core.filter","p__7455","vec__7457","from","to","cljs.core._EQ_","chess.components.board/uiify","sq","i","j","state","set-state","on-move","vec__7488","move-here","cljs.core.assoc","cljs.core/mod","G__7510","p1__7474#","p1__7482#","chess.utils/nilmap","cljs.core/name","p1__7483#","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","chess.components.board/board","p__7536","map__7538","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","seq7530","self__4777__auto__","cljs.core/seq","board","player","board-size","x__4276__auto__","y__4277__auto__","js/window","vdom-state__6056__auto__","hook-instances__6057__auto__","vec__7555","cljs.core.map","p1__6058__6059__auto__","vec__7558","cljs.core/flatten","html-cljs.hooks/use-state","iter__4582__auto__","s__7565","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__7567","cljs.core/chunk-buffer","i__7566","vec__7574","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__7564","cljs.core/chunk-rest","vec__7605","cljs.core/first","cljs.core/cons","cljs.core/rest","row","chess.utils.zip","cljs.core.range","s__7583","b__7585","i__7584","vec__7589","iter__7582","vec__7596","s__7610","b__7612","i__7611","vec__7617","iter__7609","vec__7626","chess.components.square/square","cljs.core/chunk-first"],"sourcesContent":["(ns chess.components.board\n  (:require\n    [chess.components.square :refer [square]]\n    [html-cljs.hooks :refer [use-state]]\n    [chess.utils :refer [zip nilmap]]\n    [html-cljs.html :as html :refer [cmp]]))\n\n(defn find-move [moves move]\n  (let [[mfrom mto] move]\n    (filter (fn [[from to]]\n              (and (= from mfrom)\n                   (if (nil? mto)\n                     true\n                     (= to mto))))\n            moves)))\n\n(defn uiify [sq i j state set-state moves on-move]\n  (let [[move-here] (find-move moves [(state :selected) [i j]])]\n    (assoc sq\n           :tint (= (mod (+ j (mod i 2)) 2) 0)\n           :on-click (fn []\n                       (if (nil? move-here)\n                         (set-state #(assoc % :selected [i j]))\n                         (on-move move-here)))\n           :can-move-to (not (nil? move-here))\n           :selected (= [i j] (state :selected))\n           :piece (nilmap (sq :piece) #(name %))\n           :color (nilmap (sq :color) #(name %)))))\n\n(defn board [& {:keys [board player moves on-move]}]\n  \"{:board - a 2d array containing the board. Always white on bottom, not matter\n            who the player is\n    :player - 'white' or 'black' - will flip the board if black}\"\n  (let [board-size (* 0.9\n                      (min (.-innerWidth js/window)\n                           (.-innerHeight js/window)))]\n\n  (cmp [[state set-state] (use-state {:selected nil})]\n       {:type \"div\"\n        :style {\"width\" (str board-size \"px\")\n                \"height\" (str board-size \"px\")\n                \"display\" \"inline-block\"\n                \"margin\" \"5px\"}}\n     (for [[row i] (zip board (range 8))]\n       (cmp [] {:type \"div\"\n                :style {\"display\" \"flex\" \"height\" \"13%\"}}\n         (for [[sq j] (zip row (range 8))]\n             (square (uiify sq i j state set-state moves on-move))))))))\n"]}