["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","all the hooks for this project.\n  \n  a hook is used with the cmp macro. A hook is a function that accepts any\n  number of params that the user supplies and returns a function that accepts\n  the vdom atom as its sole argument. The return value of that is the\n  user facing value that is returned in the hook-calls part of the component\n  creation. This is so the vdom-state atom may be passed in and used by the\n  hook without the user ever knowing about the inner workings/lifecycle of the\n  library.","~:file","html_cljs/hooks.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",20],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$html-cljs.hooks","~:imports",null,"~:requires",["^ ","~$html-cljs.html","^C","~$html","^C","~$cljs.core","^E","~$goog","^F"],"~:seen",["^>",["~:require"]],"~:uses",null,"~:defs",["^ ","~$use-state",["^ ","~:protocol-inline",null,"^2",["^ ","^4","html_cljs/hooks.cljs","^5",13,"^6",7,"^7",13,"^8",16,"~:arglists",["~#list",["~$quote",["^N",[["~$init"]]]]]],"^?","~$html-cljs.hooks/use-state","^4","html_cljs/hooks.cljs","^8",16,"~:method-params",["^N",[["^P"]]],"~:protocol-impl",null,"~:arglists-meta",["^N",[null,null]],"^6",1,"~:variadic?",false,"^5",13,"~:ret-tag","~$function","^7",13,"~:max-fixed-arity",1,"~:fn-var",true,"^M",["^N",["^O",["^N",[["^P"]]]]]],"~$use-dom-el",["^ ","^L",null,"^2",["^ ","^4","html_cljs/hooks.cljs","^5",21,"^6",7,"^7",21,"^8",17,"^M",["^N",["^O",["^N",[[]]]]]],"^?","~$html-cljs.hooks/use-dom-el","^4","html_cljs/hooks.cljs","^8",17,"^R",["^N",[[]]],"^S",null,"^T",["^N",[null,null]],"^6",1,"^U",false,"^5",21,"^V","^W","^7",21,"^X",0,"^Y",true,"^M",["^N",["^O",["^N",[[]]]]]]],"~:require-macros",["^ ","^E","^E","^C","^C","^D","^C"],"~:cljs.analyzer/constants",["^ ","^G",["^>",["~:el"]],"~:order",["^12"]],"~:flags",["^ ","^H",["^>",[]]],"~:js-deps",["^ "],"~:deps",["^F","^E","^C"]]