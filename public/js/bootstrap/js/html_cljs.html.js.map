{"version":3,"sources":["html_cljs/html.cljs"],"mappings":"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","names":["html-cljs.html/add-callbacks","el","event-map","seq__28809","cljs.core/seq","chunk__28810","count__28811","i__28812","vec__28828","cljs.core.nth","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__28832","cljs.core/first","cljs.core/next","event-name","f","html-cljs.html/rm-callbacks","seq__28840","chunk__28841","count__28842","i__28843","vec__28855","vec__28862","html-cljs.html/set-style","styles","seq__28866","chunk__28867","count__28868","i__28869","vec__28876","vec__28880","k","v","html-cljs.html/domify","vdom-state-atm","cljs.core/deref","p1__28884#","p1__28885#","p1__28886#","p1__28887#","p1__28888#","p1__28889#","state","node","cljs.core.dissoc","js/document","user-mods","cljs.core/identity","seq__28894","chunk__28895","count__28896","i__28897","vec__28909","vec__28914","seq__28918","chunk__28919","count__28920","i__28921","vec__28932","vec__28936","seq__28939","chunk__28940","count__28941","i__28942","vec__28951","vec__28955","fexpr__28954","fexpr__28958","seq__28959","chunk__28960","count__28961","i__28962","child","p1__28890#","cljs.core.swap_BANG_","cljs.core.assoc","html-cljs.html/create-vdom","node-func","vdom-state","cljs.core.atom","render","cljs.core/reset!","html-cljs.html/render-to-state","html-cljs.html/mount","html-el","component","html-cljs.html/clear-children","html-cljs.html/this-not-that","this-map","that-map","ti","ta","cljs.core.into","cljs.core.filter","p__28970","vec__28972","cljs.core._EQ_","cljs.core/hash","html-cljs.html/refresh-events","old-render","new-render","html-cljs.html/refresh-style","var_args","G__28989","html-cljs.html/refresh","js/Error","vdom-atm","old-vdom","new-vdom","html-cljs.html/steralized","seq__28997","chunk__28998","count__28999","i__29000","vec__29011","vec__29015","old-child","new-child","cljs.core.map","cljs.core/vector","p1__28984#","cljs.core.merge","html_cljs.html.refresh","G__29021","G__29022","html-cljs.html/replace-el","vstate","p1__28985#","G__29024","cached-render","iter__4582__auto__","s__29027","cljs.core/LazySeq","c__4580__auto__","size__4581__auto__","b__29029","cljs.core/chunk-buffer","i__29028","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__29026","cljs.core/cons","cljs.core/rest","vdom","p1__29030#","clojure.walk/postwalk","cljs.core/fn?","old-el","new-el"],"sourcesContent":["(ns html-cljs.html\n  \"basically a mini react with a virtual dom and a diffing algorithm\n  need to fix the child element problem and force id's on child elements\n  because i'm just using an inefficient algorithm rn\"\n  (:require-macros [html-cljs.html :refer [component cmp]])\n  (:require [clojure.string :as string]\n            [clojure.walk]))\n\n(declare render-to-state refresh steralized replace-el clear-children rerender-children)\n\n(defn add-callbacks [el event-map]\n  (doseq [[event-name f] event-map]\n    (.addEventListener el event-name f)))\n\n; the exact inverse of the above fn\n(defn rm-callbacks [el event-map]\n  (doseq [[event-name f] event-map]\n    (.removeEventListener el event-name f)))\n\n(defn set-style [el styles]\n  (doseq [[k v] styles]\n    (aset (.-style el) k v)))\n\n; adds :el to the state atom and its children this\n(defn domify [vdom-state-atm]\n  \"this creates an html element for the vdom state and its children.\n  It is a call that we want to avoid if at all possible since its expensive to\n  create all the dom elements\n\n   required keys:\n    :type\n\n   optional keys:\n    :on [event-name, callback] - callback will be passed the event\n                                            and the element\n    :style - pass dictionary and styles set as el.style[key] = value\n    :content - a string to pass to the innerHTML\n    :children - seq of children that will be recursively called\"\n\n  (let [state @vdom-state-atm\n        node (dissoc (state :cached-render) :children)\n        el (.createElement js/document (node :type))\n        user-mods {:type identity\n                   :identifier identity ;nothing. used purely to trick the rerender alg\n                   :class #(set! (.-className el) %)\n                   :elem-props #(doseq [[k v] %]\n                                 (aset el k v))\n                   :style #(doseq [[k v] %]\n                             (aset (.-style el) k v))\n                   :on #(add-callbacks el %)\n                   :href #(set! (.-href el) %)\n                   :content #(set! (.-innerHTML el) %)}]\n    (doseq [[k v] node]\n      ((user-mods k) v))\n    (doseq [child (state :vdom-children)]\n      (.appendChild el (domify child)))\n    (swap! vdom-state-atm #(assoc % :el el))\n    el))\n\n; does the least amount of work possible to run a diff to see if we need to\n; rerender something on this node (not children)\n(defn ^:private create-vdom [node-func]\n  (let [vdom-state (atom {})\n        render (node-func vdom-state)]\n    #_(prn \"creating vdom el: \" (render))\n    (reset! vdom-state (render-to-state render))\n    vdom-state))\n\n; vdom-el is a function 2nd order function where you pass in the hooks and it\n; returns a function that takes no arguments and returns the rundered object\n(defn mount [html-el component]\n  (clear-children html-el)\n  (.appendChild\n    html-el\n    (domify (create-vdom component))))\n\n(defn this-not-that [this-map that-map]\n  (let [ti (if (nil? this-map) {} this-map)\n        ta (if (nil? that-map) {} that-map)]\n    (into {} (filter (fn [[k v]]\n                       (not (= (hash (ta k)) (hash v))))\n                     ti))))\n\n; if the hashes differ in the callbacks, it updates them!\n(defn refresh-events [el old-render new-render]\n  (rm-callbacks el (this-not-that (old-render :on) (new-render :on)))\n  (add-callbacks el (this-not-that (new-render :on) (old-render :on))))\n\n(defn refresh-style [el old-render new-render]\n  (set-style el (this-not-that (new-render :style) (old-render :on))))\n\n; pass the mounted vdom state atom & will refresh in place\n(defn refresh\n  \"old-vdom assumed to be domified. new-vdom assumed not to have been\"\n  ([vdom-atm old-vdom]\n    (let [old-render (old-vdom :cached-render)\n          new-vdom @vdom-atm\n          new-render (new-vdom :cached-render)]\n      #_(prn \"comparing old: \" (steralized old-render) \" to new \" (steralized new-render))\n      ; compare and remount if necessary\n      (if (= (steralized old-render) (steralized new-render))\n        (do\n          #_(prn \"refreshing styles for \" old-render)\n          (refresh-events (old-vdom :el) old-render new-render)\n          (refresh-style (old-vdom :el) old-render new-render)\n          (doseq [[old-child new-child] (map vector (old-vdom :vdom-children) (new-vdom :vdom-children))]\n            (swap! new-child #(merge @old-child %))\n            (refresh new-child @old-child)))\n        (replace-el (old-vdom :el) (domify vdom-atm)))))\n  ([vdom-atm]\n    (let [vstate @vdom-atm]\n      (swap! vdom-atm #(merge % (render-to-state (% :render))))\n      (refresh vdom-atm vstate))))\n\n(defn render-to-state [render]\n  (let [cached-render (render)]\n    {:vdom-children (for [child (cached-render :children)]\n                      (create-vdom child))\n     :cached-render cached-render\n     :render render}))\n\n(defn steralized [vdom]\n  \"now we just set remove callbacks and styles since there is optimized updating\n  for both of these\"\n  (clojure.walk/postwalk\n           #(if (fn? %) \"fn\" %)\n           (dissoc vdom :style :on)))\n\n(defn replace-el [old-el new-el]\n  (.replaceChild (.-parentNode old-el) new-el old-el))\n\n(defn clear-children [el]\n  (if (.-firstChild el)\n    (do (.removeChild el (.-firstChild el))\n        (clear-children el))\n    el))\n"]}